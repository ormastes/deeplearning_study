[
  {
    "Test Target": [
      "absl::string_view KindToString(Kind kind) {",
      "  switch (kind) {",
      "    case Kind::kNullType:",
      "      return \"null_type\";",
      "    case Kind::kDyn:",
      "      return \"dyn\";",
      "    case Kind::kAny:",
      "      return \"any\";",
      "    case Kind::kType:",
      "      return \"type\";",
      "    case Kind::kTypeParam:",
      "      return \"type_param\";",
      "    case Kind::kFunction:",
      "      return \"function\";",
      "    case Kind::kBool:",
      "      return \"bool\";",
      "    case Kind::kInt:",
      "      return \"int\";",
      "    case Kind::kUint:",
      "      return \"uint\";",
      "    case Kind::kDouble:",
      "      return \"double\";",
      "    case Kind::kString:",
      "      return \"string\";",
      "    case Kind::kBytes:",
      "      return \"bytes\";",
      "    case Kind::kDuration:",
      "      return \"duration\";",
      "    case Kind::kTimestamp:",
      "      return \"timestamp\";",
      "    case Kind::kList:",
      "      return \"list\";",
      "    case Kind::kMap:",
      "      return \"map\";",
      "    case Kind::kStruct:",
      "      return \"struct\";",
      "    case Kind::kUnknown:",
      "      return \"*unknown*\";",
      "    case Kind::kOpaque:",
      "      return \"*opaque*\";",
      "    case Kind::kBoolWrapper:",
      "      return \"google.protobuf.BoolValue\";",
      "    case Kind::kIntWrapper:",
      "      return \"google.protobuf.Int64Value\";",
      "    case Kind::kUintWrapper:",
      "      return \"google.protobuf.UInt64Value\";",
      "    case Kind::kDoubleWrapper:",
      "      return \"google.protobuf.DoubleValue\";",
      "    case Kind::kStringWrapper:",
      "      return \"google.protobuf.StringValue\";",
      "    case Kind::kBytesWrapper:",
      "      return \"google.protobuf.BytesValue\";",
      "    default:",
      "      return \"*error*\";",
      "  }",
      "}"
    ],
    "Test Object": "Verify KindToString returns correct string representation for each Kind enum value, including error cases.",
    "Input Data": [
      ">>> Various Kind enum values: kError, kNullType, kDyn, kAny, kType, kBool, kInt, kUint, kDouble, kString,",
      ">>> kBytes, kDuration, kTimestamp, kList, kMap, kStruct, kUnknown, kOpaque, kBoolWrapper, kIntWrapper,",
      ">>> kUintWrapper, kDoubleWrapper, kStringWrapper, kBytesWrapper, and std::numeric_limits<int>::max()"
    ],
    "Expected Output": [
      ">>> %<< KindToString(Kind::kError);//EXPECT_EQ(KindToString(Kind::kError), \"*error*\")",
      "*error*",
      ">>> %<< KindToString(Kind::kNullType);//EXPECT_EQ(KindToString(Kind::kNullType), \"null_type\")",
      "null_type",
      ">>> %<< KindToString(Kind::kDyn);//EXPECT_EQ(KindToString(Kind::kDyn), \"dyn\")",
      "dyn",
      ">>> %<< KindToString(Kind::kAny);//EXPECT_EQ(KindToString(Kind::kAny), \"any\")",
      "any",
      ">>> %<< KindToString(Kind::kType);//EXPECT_EQ(KindToString(Kind::kType), \"type\")",
      "type",
      ">>> %<< KindToString(Kind::kBool);//EXPECT_EQ(KindToString(Kind::kBool), \"bool\")",
      "bool",
      ">>> %<< KindToString(Kind::kInt);//EXPECT_EQ(KindToString(Kind::kInt), \"int\")",
      "int",
      ">>> %<< KindToString(Kind::kUint);//EXPECT_EQ(KindToString(Kind::kUint), \"uint\")",
      "uint",
      ">>> %<< KindToString(Kind::kDouble);//EXPECT_EQ(KindToString(Kind::kDouble), \"double\")",
      "double",
      ">>> %<< KindToString(Kind::kString);//EXPECT_EQ(KindToString(Kind::kString), \"string\")",
      "string",
      ">>> %<< KindToString(Kind::kBytes);//EXPECT_EQ(KindToString(Kind::kBytes), \"bytes\")",
      "bytes",
      ">>> %<< KindToString(Kind::kDuration);//EXPECT_EQ(KindToString(Kind::kDuration), \"duration\")",
      "duration",
      ">>> %<< KindToString(Kind::kTimestamp);//EXPECT_EQ(KindToString(Kind::kTimestamp), \"timestamp\")",
      "timestamp",
      ">>> %<< KindToString(Kind::kList);//EXPECT_EQ(KindToString(Kind::kList), \"list\")",
      "list",
      ">>> %<< KindToString(Kind::kMap);//EXPECT_EQ(KindToString(Kind::kMap), \"map\")",
      "map",
      ">>> %<< KindToString(Kind::kStruct);//EXPECT_EQ(KindToString(Kind::kStruct), \"struct\")",
      "struct",
      ">>> %<< KindToString(Kind::kUnknown);//EXPECT_EQ(KindToString(Kind::kUnknown), \"*unknown*\")",
      "*unknown*",
      ">>> %<< KindToString(Kind::kOpaque);//EXPECT_EQ(KindToString(Kind::kOpaque), \"*opaque*\")",
      "*opaque*",
      ">>> %<< KindToString(Kind::kBoolWrapper);//EXPECT_EQ(KindToString(Kind::kBoolWrapper), \"google.protobuf.BoolValue\")",
      "google.protobuf.BoolValue",
      ">>> %<< KindToString(Kind::kIntWrapper);//EXPECT_EQ(KindToString(Kind::kIntWrapper), \"google.protobuf.Int64Value\")",
      "google.protobuf.Int64Value",
      ">>> %<< KindToString(Kind::kUintWrapper);//EXPECT_EQ(KindToString(Kind::kUintWrapper), \"google.protobuf.UInt64Value\")",
      "google.protobuf.UInt64Value",
      ">>> %<< KindToString(Kind::kDoubleWrapper);//EXPECT_EQ(KindToString(Kind::kDoubleWrapper), \"google.protobuf.DoubleValue\")",
      "google.protobuf.DoubleValue",
      ">>> %<< KindToString(Kind::kStringWrapper);//EXPECT_EQ(KindToString(Kind::kStringWrapper), \"google.protobuf.StringValue\")",
      "google.protobuf.StringValue",
      ">>> %<< KindToString(Kind::kBytesWrapper);//EXPECT_EQ(KindToString(Kind::kBytesWrapper), \"google.protobuf.BytesValue\")",
      "google.protobuf.BytesValue",
      ">>> %<< KindToString(static_cast<Kind>(std::numeric_limits<int>::max()));//EXPECT_EQ(KindToString(static_cast<Kind>(std::numeric_limits<int>::max())), \"*error*\")",
      "*error*"
    ],
    "Clang-repl Test": [
      ">>> // Global Settings:",
      ">>> #include \"common/kind.h\"",
      ">>> #include <limits>",
      ">>> #include <type_traits>",
      ">>> #include \"common/type_kind.h\"",
      ">>> #include \"common/value_kind.h\"",
      ">>> #include \"internal/testing.h\"",
      ">>> ",
      ">>> /*namespace cel {*/",
      ">>> // Test Object: Verify KindToString returns correct string representation for each Kind enum value, including error cases.",
      ">>> // Test Case: Kind_ToString",
      ">>> %<< KindToString(Kind::kError);//EXPECT_EQ(KindToString(Kind::kError), \"*error*\")",
      "*error*",
      ">>> %<< KindToString(Kind::kNullType);//EXPECT_EQ(KindToString(Kind::kNullType), \"null_type\")",
      "null_type",
      ">>> %<< KindToString(Kind::kDyn);//EXPECT_EQ(KindToString(Kind::kDyn), \"dyn\")",
      "dyn",
      ">>> %<< KindToString(Kind::kAny);//EXPECT_EQ(KindToString(Kind::kAny), \"any\")",
      "any",
      ">>> %<< KindToString(Kind::kType);//EXPECT_EQ(KindToString(Kind::kType), \"type\")",
      "type",
      ">>> %<< KindToString(Kind::kBool);//EXPECT_EQ(KindToString(Kind::kBool), \"bool\")",
      "bool",
      ">>> %<< KindToString(Kind::kInt);//EXPECT_EQ(KindToString(Kind::kInt), \"int\")",
      "int",
      ">>> %<< KindToString(Kind::kUint);//EXPECT_EQ(KindToString(Kind::kUint), \"uint\")",
      "uint",
      ">>> %<< KindToString(Kind::kDouble);//EXPECT_EQ(KindToString(Kind::kDouble), \"double\")",
      "double",
      ">>> %<< KindToString(Kind::kString);//EXPECT_EQ(KindToString(Kind::kString), \"string\")",
      "string",
      ">>> %<< KindToString(Kind::kBytes);//EXPECT_EQ(KindToString(Kind::kBytes), \"bytes\")",
      "bytes",
      ">>> %<< KindToString(Kind::kDuration);//EXPECT_EQ(KindToString(Kind::kDuration), \"duration\")",
      "duration",
      ">>> %<< KindToString(Kind::kTimestamp);//EXPECT_EQ(KindToString(Kind::kTimestamp), \"timestamp\")",
      "timestamp",
      ">>> %<< KindToString(Kind::kList);//EXPECT_EQ(KindToString(Kind::kList), \"list\")",
      "list",
      ">>> %<< KindToString(Kind::kMap);//EXPECT_EQ(KindToString(Kind::kMap), \"map\")",
      "map",
      ">>> %<< KindToString(Kind::kStruct);//EXPECT_EQ(KindToString(Kind::kStruct), \"struct\")",
      "struct",
      ">>> %<< KindToString(Kind::kUnknown);//EXPECT_EQ(KindToString(Kind::kUnknown), \"*unknown*\")",
      "*unknown*",
      ">>> %<< KindToString(Kind::kOpaque);//EXPECT_EQ(KindToString(Kind::kOpaque), \"*opaque*\")",
      "*opaque*",
      ">>> %<< KindToString(Kind::kBoolWrapper);//EXPECT_EQ(KindToString(Kind::kBoolWrapper), \"google.protobuf.BoolValue\")",
      "google.protobuf.BoolValue",
      ">>> %<< KindToString(Kind::kIntWrapper);//EXPECT_EQ(KindToString(Kind::kIntWrapper), \"google.protobuf.Int64Value\")",
      "google.protobuf.Int64Value",
      ">>> %<< KindToString(Kind::kUintWrapper);//EXPECT_EQ(KindToString(Kind::kUintWrapper), \"google.protobuf.UInt64Value\")",
      "google.protobuf.UInt64Value",
      ">>> %<< KindToString(Kind::kDoubleWrapper);//EXPECT_EQ(KindToString(Kind::kDoubleWrapper), \"google.protobuf.DoubleValue\")",
      "google.protobuf.DoubleValue",
      ">>> %<< KindToString(Kind::kStringWrapper);//EXPECT_EQ(KindToString(Kind::kStringWrapper), \"google.protobuf.StringValue\")",
      "google.protobuf.StringValue",
      ">>> %<< KindToString(Kind::kBytesWrapper);//EXPECT_EQ(KindToString(Kind::kBytesWrapper), \"google.protobuf.BytesValue\")",
      "google.protobuf.BytesValue",
      ">>> %<< KindToString(static_cast<Kind>(std::numeric_limits<int>::max()));//EXPECT_EQ(KindToString(static_cast<Kind>(std::numeric_limits<int>::max())), \"*error*\")",
      "*error*",
      ">>> /*}*/"
    ]
  },
  {
    "Test Target": [
      "absl::string_view KindToString(Kind kind) {",
      "  switch (kind) {",
      "    case Kind::kNullType:",
      "      return \"null_type\";",
      "    case Kind::kDyn:",
      "      return \"dyn\";",
      "    case Kind::kAny:",
      "      return \"any\";",
      "    case Kind::kType:",
      "      return \"type\";",
      "    case Kind::kTypeParam:",
      "      return \"type_param\";",
      "    case Kind::kFunction:",
      "      return \"function\";",
      "    case Kind::kBool:",
      "      return \"bool\";",
      "    case Kind::kInt:",
      "      return \"int\";",
      "    case Kind::kUint:",
      "      return \"uint\";",
      "    case Kind::kDouble:",
      "      return \"double\";",
      "    case Kind::kString:",
      "      return \"string\";",
      "    case Kind::kBytes:",
      "      return \"bytes\";",
      "    case Kind::kDuration:",
      "      return \"duration\";",
      "    case Kind::kTimestamp:",
      "      return \"timestamp\";",
      "    case Kind::kList:",
      "      return \"list\";",
      "    case Kind::kMap:",
      "      return \"map\";",
      "    case Kind::kStruct:",
      "      return \"struct\";",
      "    case Kind::kUnknown:",
      "      return \"*unknown*\";",
      "    case Kind::kOpaque:",
      "      return \"*opaque*\";",
      "    case Kind::kBoolWrapper:",
      "      return \"google.protobuf.BoolValue\";",
      "    case Kind::kIntWrapper:",
      "      return \"google.protobuf.Int64Value\";",
      "    case Kind::kUintWrapper:",
      "      return \"google.protobuf.UInt64Value\";",
      "    case Kind::kDoubleWrapper:",
      "      return \"google.protobuf.DoubleValue\";",
      "    case Kind::kStringWrapper:",
      "      return \"google.protobuf.StringValue\";",
      "    case Kind::kBytesWrapper:",
      "      return \"google.protobuf.BytesValue\";",
      "    default:",
      "      return \"*error*\";",
      "  }",
      "}"
    ],
    "Test Object": "Verify conversion roundtrip between TypeKind and Kind.",
    "Input Data": [
      ">>> Kind::kBool"
    ],
    "Expected Output": [
      ">>> %<< TypeKindToKind(KindToTypeKind(Kind::kBool)) == Kind::kBool;//EXPECT_EQ(TypeKindToKind(KindToTypeKind(Kind::kBool)), Kind::kBool)",
      "true"
    ],
    "Clang-repl Test": [
      ">>> // Global Settings:",
      ">>> #include \"common/kind.h\"",
      ">>> #include <limits>",
      ">>> #include <type_traits>",
      ">>> #include \"common/type_kind.h\"",
      ">>> #include \"common/value_kind.h\"",
      ">>> #include \"internal/testing.h\"",
      ">>> ",
      ">>> /*namespace cel {*/",
      ">>> // Test Object: Verify conversion roundtrip between TypeKind and Kind.",
      ">>> // Test Case: Kind_TypeKindRoundtrip",
      ">>> %<< TypeKindToKind(KindToTypeKind(Kind::kBool)) == Kind::kBool;//EXPECT_EQ(TypeKindToKind(KindToTypeKind(Kind::kBool)), Kind::kBool)",
      "true",
      ">>> /*}*/"
    ]
  },
  {
    "Test Target": [
      "absl::string_view KindToString(Kind kind) {",
      "  switch (kind) {",
      "    case Kind::kNullType:",
      "      return \"null_type\";",
      "    case Kind::kDyn:",
      "      return \"dyn\";",
      "    case Kind::kAny:",
      "      return \"any\";",
      "    case Kind::kType:",
      "      return \"type\";",
      "    case Kind::kTypeParam:",
      "      return \"type_param\";",
      "    case Kind::kFunction:",
      "      return \"function\";",
      "    case Kind::kBool:",
      "      return \"bool\";",
      "    case Kind::kInt:",
      "      return \"int\";",
      "    case Kind::kUint:",
      "      return \"uint\";",
      "    case Kind::kDouble:",
      "      return \"double\";",
      "    case Kind::kString:",
      "      return \"string\";",
      "    case Kind::kBytes:",
      "      return \"bytes\";",
      "    case Kind::kDuration:",
      "      return \"duration\";",
      "    case Kind::kTimestamp:",
      "      return \"timestamp\";",
      "    case Kind::kList:",
      "      return \"list\";",
      "    case Kind::kMap:",
      "      return \"map\";",
      "    case Kind::kStruct:",
      "      return \"struct\";",
      "    case Kind::kUnknown:",
      "      return \"*unknown*\";",
      "    case Kind::kOpaque:",
      "      return \"*opaque*\";",
      "    case Kind::kBoolWrapper:",
      "      return \"google.protobuf.BoolValue\";",
      "    case Kind::kIntWrapper:",
      "      return \"google.protobuf.Int64Value\";",
      "    case Kind::kUintWrapper:",
      "      return \"google.protobuf.UInt64Value\";",
      "    case Kind::kDoubleWrapper:",
      "      return \"google.protobuf.DoubleValue\";",
      "    case Kind::kStringWrapper:",
      "      return \"google.protobuf.StringValue\";",
      "    case Kind::kBytesWrapper:",
      "      return \"google.protobuf.BytesValue\";",
      "    default:",
      "      return \"*error*\";",
      "  }",
      "}"
    ],
    "Test Object": "Verify conversion roundtrip between ValueKind and Kind.",
    "Input Data": [
      ">>> Kind::kBool"
    ],
    "Expected Output": [
      ">>> %<< ValueKindToKind(KindToValueKind(Kind::kBool)) == Kind::kBool;//EXPECT_EQ(ValueKindToKind(KindToValueKind(Kind::kBool)), Kind::kBool)",
      "true"
    ],
    "Clang-repl Test": [
      ">>> // Global Settings:",
      ">>> #include \"common/kind.h\"",
      ">>> #include <limits>",
      ">>> #include <type_traits>",
      ">>> #include \"common/type_kind.h\"",
      ">>> #include \"common/value_kind.h\"",
      ">>> #include \"internal/testing.h\"",
      ">>> ",
      ">>> /*namespace cel {*/",
      ">>> // Test Object: Verify conversion roundtrip between ValueKind and Kind.",
      ">>> // Test Case: Kind_ValueKindRoundtrip",
      ">>> %<< ValueKindToKind(KindToValueKind(Kind::kBool)) == Kind::kBool;//EXPECT_EQ(ValueKindToKind(KindToValueKind(Kind::kBool)), Kind::kBool)",
      "true",
      ">>> /*}*/"
    ]
  },
  {
    "Test Target": [
      "absl::string_view KindToString(Kind kind) {",
      "  switch (kind) {",
      "    case Kind::kNullType:",
      "      return \"null_type\";",
      "    case Kind::kDyn:",
      "      return \"dyn\";",
      "    case Kind::kAny:",
      "      return \"any\";",
      "    case Kind::kType:",
      "      return \"type\";",
      "    case Kind::kTypeParam:",
      "      return \"type_param\";",
      "    case Kind::kFunction:",
      "      return \"function\";",
      "    case Kind::kBool:",
      "      return \"bool\";",
      "    case Kind::kInt:",
      "      return \"int\";",
      "    case Kind::kUint:",
      "      return \"uint\";",
      "    case Kind::kDouble:",
      "      return \"double\";",
      "    case Kind::kString:",
      "      return \"string\";",
      "    case Kind::kBytes:",
      "      return \"bytes\";",
      "    case Kind::kDuration:",
      "      return \"duration\";",
      "    case Kind::kTimestamp:",
      "      return \"timestamp\";",
      "    case Kind::kList:",
      "      return \"list\";",
      "    case Kind::kMap:",
      "      return \"map\";",
      "    case Kind::kStruct:",
      "      return \"struct\";",
      "    case Kind::kUnknown:",
      "      return \"*unknown*\";",
      "    case Kind::kOpaque:",
      "      return \"*opaque*\";",
      "    case Kind::kBoolWrapper:",
      "      return \"google.protobuf.BoolValue\";",
      "    case Kind::kIntWrapper:",
      "      return \"google.protobuf.Int64Value\";",
      "    case Kind::kUintWrapper:",
      "      return \"google.protobuf.UInt64Value\";",
      "    case Kind::kDoubleWrapper:",
      "      return \"google.protobuf.DoubleValue\";",
      "    case Kind::kStringWrapper:",
      "      return \"google.protobuf.StringValue\";",
      "    case Kind::kBytesWrapper:",
      "      return \"google.protobuf.BytesValue\";",
      "    default:",
      "      return \"*error*\";",
      "  }",
      "}"
    ],
    "Test Object": "Check if KindIsTypeKind correctly identifies type kinds.",
    "Input Data": [
      ">>> Kind::kBool, Kind::kAny, Kind::kDyn"
    ],
    "Expected Output": [
      ">>> %<< (KindIsTypeKind(Kind::kBool))==true;//EXPECT_TRUE(KindIsTypeKind(Kind::kBool))",
      "true",
      ">>> %<< (KindIsTypeKind(Kind::kAny))==true;//EXPECT_TRUE(KindIsTypeKind(Kind::kAny))",
      "true",
      ">>> %<< (KindIsTypeKind(Kind::kDyn))==true;//EXPECT_TRUE(KindIsTypeKind(Kind::kDyn))",
      "true"
    ],
    "Clang-repl Test": [
      ">>> // Global Settings:",
      ">>> #include \"common/kind.h\"",
      ">>> #include <limits>",
      ">>> #include <type_traits>",
      ">>> #include \"common/type_kind.h\"",
      ">>> #include \"common/value_kind.h\"",
      ">>> #include \"internal/testing.h\"",
      ">>> ",
      ">>> /*namespace cel {*/",
      ">>> // Test Object: Check if KindIsTypeKind correctly identifies type kinds.",
      ">>> // Test Case: Kind_IsTypeKind",
      ">>> %<< (KindIsTypeKind(Kind::kBool))==true;//EXPECT_TRUE(KindIsTypeKind(Kind::kBool))",
      "true",
      ">>> %<< (KindIsTypeKind(Kind::kAny))==true;//EXPECT_TRUE(KindIsTypeKind(Kind::kAny))",
      "true",
      ">>> %<< (KindIsTypeKind(Kind::kDyn))==true;//EXPECT_TRUE(KindIsTypeKind(Kind::kDyn))",
      "true",
      ">>> /*}*/"
    ]
  },
  {
    "Test Target": [
      "absl::string_view KindToString(Kind kind) {",
      "  switch (kind) {",
      "    case Kind::kNullType:",
      "      return \"null_type\";",
      "    case Kind::kDyn:",
      "      return \"dyn\";",
      "    case Kind::kAny:",
      "      return \"any\";",
      "    case Kind::kType:",
      "      return \"type\";",
      "    case Kind::kTypeParam:",
      "      return \"type_param\";",
      "    case Kind::kFunction:",
      "      return \"function\";",
      "    case Kind::kBool:",
      "      return \"bool\";",
      "    case Kind::kInt:",
      "      return \"int\";",
      "    case Kind::kUint:",
      "      return \"uint\";",
      "    case Kind::kDouble:",
      "      return \"double\";",
      "    case Kind::kString:",
      "      return \"string\";",
      "    case Kind::kBytes:",
      "      return \"bytes\";",
      "    case Kind::kDuration:",
      "      return \"duration\";",
      "    case Kind::kTimestamp:",
      "      return \"timestamp\";",
      "    case Kind::kList:",
      "      return \"list\";",
      "    case Kind::kMap:",
      "      return \"map\";",
      "    case Kind::kStruct:",
      "      return \"struct\";",
      "    case Kind::kUnknown:",
      "      return \"*unknown*\";",
      "    case Kind::kOpaque:",
      "      return \"*opaque*\";",
      "    case Kind::kBoolWrapper:",
      "      return \"google.protobuf.BoolValue\";",
      "    case Kind::kIntWrapper:",
      "      return \"google.protobuf.Int64Value\";",
      "    case Kind::kUintWrapper:",
      "      return \"google.protobuf.UInt64Value\";",
      "    case Kind::kDoubleWrapper:",
      "      return \"google.protobuf.DoubleValue\";",
      "    case Kind::kStringWrapper:",
      "      return \"google.protobuf.StringValue\";",
      "    case Kind::kBytesWrapper:",
      "      return \"google.protobuf.BytesValue\";",
      "    default:",
      "      return \"*error*\";",
      "  }",
      "}"
    ],
    "Test Object": "Check if KindIsValueKind correctly distinguishes value kinds.",
    "Input Data": [
      ">>> Kind::kBool, Kind::kAny, Kind::kDyn"
    ],
    "Expected Output": [
      ">>> %<< (KindIsValueKind(Kind::kBool))==true;//EXPECT_TRUE(KindIsValueKind(Kind::kBool))",
      "true",
      ">>> %<< (KindIsValueKind(Kind::kAny))==false;//EXPECT_FALSE(KindIsValueKind(Kind::kAny))",
      "true",
      ">>> %<< (KindIsValueKind(Kind::kDyn))==false;//EXPECT_FALSE(KindIsValueKind(Kind::kDyn))",
      "true"
    ],
    "Clang-repl Test": [
      ">>> // Global Settings:",
      ">>> #include \"common/kind.h\"",
      ">>> #include <limits>",
      ">>> #include <type_traits>",
      ">>> #include \"common/type_kind.h\"",
      ">>> #include \"common/value_kind.h\"",
      ">>> #include \"internal/testing.h\"",
      ">>> ",
      ">>> /*namespace cel {*/",
      ">>> // Test Object: Check if KindIsValueKind correctly distinguishes value kinds.",
      ">>> // Test Case: Kind_IsValueKind",
      ">>> %<< (KindIsValueKind(Kind::kBool))==true;//EXPECT_TRUE(KindIsValueKind(Kind::kBool))",
      "true",
      ">>> %<< (KindIsValueKind(Kind::kAny))==false;//EXPECT_FALSE(KindIsValueKind(Kind::kAny))",
      "true",
      ">>> %<< (KindIsValueKind(Kind::kDyn))==false;//EXPECT_FALSE(KindIsValueKind(Kind::kDyn))",
      "true",
      ">>> /*}*/"
    ]
  },
  {
    "Test Target": [
      "absl::string_view KindToString(Kind kind) {",
      "  switch (kind) {",
      "    case Kind::kNullType:",
      "      return \"null_type\";",
      "    case Kind::kDyn:",
      "      return \"dyn\";",
      "    case Kind::kAny:",
      "      return \"any\";",
      "    case Kind::kType:",
      "      return \"type\";",
      "    case Kind::kTypeParam:",
      "      return \"type_param\";",
      "    case Kind::kFunction:",
      "      return \"function\";",
      "    case Kind::kBool:",
      "      return \"bool\";",
      "    case Kind::kInt:",
      "      return \"int\";",
      "    case Kind::kUint:",
      "      return \"uint\";",
      "    case Kind::kDouble:",
      "      return \"double\";",
      "    case Kind::kString:",
      "      return \"string\";",
      "    case Kind::kBytes:",
      "      return \"bytes\";",
      "    case Kind::kDuration:",
      "      return \"duration\";",
      "    case Kind::kTimestamp:",
      "      return \"timestamp\";",
      "    case Kind::kList:",
      "      return \"list\";",
      "    case Kind::kMap:",
      "      return \"map\";",
      "    case Kind::kStruct:",
      "      return \"struct\";",
      "    case Kind::kUnknown:",
      "      return \"*unknown*\";",
      "    case Kind::kOpaque:",
      "      return \"*opaque*\";",
      "    case Kind::kBoolWrapper:",
      "      return \"google.protobuf.BoolValue\";",
      "    case Kind::kIntWrapper:",
      "      return \"google.protobuf.Int64Value\";",
      "    case Kind::kUintWrapper:",
      "      return \"google.protobuf.UInt64Value\";",
      "    case Kind::kDoubleWrapper:",
      "      return \"google.protobuf.DoubleValue\";",
      "    case Kind::kStringWrapper:",
      "      return \"google.protobuf.StringValue\";",
      "    case Kind::kBytesWrapper:",
      "      return \"google.protobuf.BytesValue\";",
      "    default:",
      "      return \"*error*\";",
      "  }",
      "}"
    ],
    "Test Object": "Ensure equality and inequality comparisons among Kind, TypeKind, and ValueKind work as expected.",
    "Input Data": [
      ">>> Comparing: Kind::kBool with TypeKind::kBool, ValueKind::kBool, TypeKind::kInt, ValueKind::kInt"
    ],
    "Expected Output": [
      ">>> %<< Kind::kBool == TypeKind::kBool;//EXPECT_EQ(Kind::kBool, TypeKind::kBool)",
      "true",
      ">>> %<< TypeKind::kBool == Kind::kBool;//EXPECT_EQ(TypeKind::kBool, Kind::kBool)",
      "true",
      ">>> %<< Kind::kBool == ValueKind::kBool;//EXPECT_EQ(Kind::kBool, ValueKind::kBool)",
      "true",
      ">>> %<< ValueKind::kBool == Kind::kBool;//EXPECT_EQ(ValueKind::kBool, Kind::kBool)",
      "true",
      ">>> %<< (Kind::kBool)!=(TypeKind::kInt);//EXPECT_NE(Kind::kBool, TypeKind::kInt)",
      "true",
      ">>> %<< (TypeKind::kInt)!=(Kind::kBool);//EXPECT_NE(TypeKind::kInt, Kind::kBool)",
      "true",
      ">>> %<< (Kind::kBool)!=(ValueKind::kInt);//EXPECT_NE(Kind::kBool, ValueKind::kInt)",
      "true",
      ">>> %<< (ValueKind::kInt)!=(Kind::kBool);//EXPECT_NE(ValueKind::kInt, Kind::kBool)",
      "true"
    ],
    "Clang-repl Test": [
      ">>> // Global Settings:",
      ">>> #include \"common/kind.h\"",
      ">>> #include <limits>",
      ">>> #include <type_traits>",
      ">>> #include \"common/type_kind.h\"",
      ">>> #include \"common/value_kind.h\"",
      ">>> #include \"internal/testing.h\"",
      ">>> ",
      ">>> /*namespace cel {*/",
      ">>> // Test Object: Ensure equality and inequality comparisons among Kind, TypeKind, and ValueKind work as expected.",
      ">>> // Test Case: Kind_Equality",
      ">>> %<< Kind::kBool == TypeKind::kBool;//EXPECT_EQ(Kind::kBool, TypeKind::kBool)",
      "true",
      ">>> %<< TypeKind::kBool == Kind::kBool;//EXPECT_EQ(TypeKind::kBool, Kind::kBool)",
      "true",
      ">>> %<< Kind::kBool == ValueKind::kBool;//EXPECT_EQ(Kind::kBool, ValueKind::kBool)",
      "true",
      ">>> %<< ValueKind::kBool == Kind::kBool;//EXPECT_EQ(ValueKind::kBool, Kind::kBool)",
      "true",
      ">>> %<< (Kind::kBool)!=(TypeKind::kInt);//EXPECT_NE(Kind::kBool, TypeKind::kInt)",
      "true",
      ">>> %<< (TypeKind::kInt)!=(Kind::kBool);//EXPECT_NE(TypeKind::kInt, Kind::kBool)",
      "true",
      ">>> %<< (Kind::kBool)!=(ValueKind::kInt);//EXPECT_NE(Kind::kBool, ValueKind::kInt)",
      "true",
      ">>> %<< (ValueKind::kInt)!=(Kind::kBool);//EXPECT_NE(ValueKind::kInt, Kind::kBool)",
      "true",
      ">>> /*}*/"
    ]
  },
  {
    "Test Target": [
      "absl::string_view KindToString(Kind kind) {",
      "  switch (kind) {",
      "    case Kind::kNullType:",
      "      return \"null_type\";",
      "    case Kind::kDyn:",
      "      return \"dyn\";",
      "    case Kind::kAny:",
      "      return \"any\";",
      "    case Kind::kType:",
      "      return \"type\";",
      "    case Kind::kTypeParam:",
      "      return \"type_param\";",
      "    case Kind::kFunction:",
      "      return \"function\";",
      "    case Kind::kBool:",
      "      return \"bool\";",
      "    case Kind::kInt:",
      "      return \"int\";",
      "    case Kind::kUint:",
      "      return \"uint\";",
      "    case Kind::kDouble:",
      "      return \"double\";",
      "    case Kind::kString:",
      "      return \"string\";",
      "    case Kind::kBytes:",
      "      return \"bytes\";",
      "    case Kind::kDuration:",
      "      return \"duration\";",
      "    case Kind::kTimestamp:",
      "      return \"timestamp\";",
      "    case Kind::kList:",
      "      return \"list\";",
      "    case Kind::kMap:",
      "      return \"map\";",
      "    case Kind::kStruct:",
      "      return \"struct\";",
      "    case Kind::kUnknown:",
      "      return \"*unknown*\";",
      "    case Kind::kOpaque:",
      "      return \"*opaque*\";",
      "    case Kind::kBoolWrapper:",
      "      return \"google.protobuf.BoolValue\";",
      "    case Kind::kIntWrapper:",
      "      return \"google.protobuf.Int64Value\";",
      "    case Kind::kUintWrapper:",
      "      return \"google.protobuf.UInt64Value\";",
      "    case Kind::kDoubleWrapper:",
      "      return \"google.protobuf.DoubleValue\";",
      "    case Kind::kStringWrapper:",
      "      return \"google.protobuf.StringValue\";",
      "    case Kind::kBytesWrapper:",
      "      return \"google.protobuf.BytesValue\";",
      "    default:",
      "      return \"*error*\";",
      "  }",
      "}"
    ],
    "Test Object": "Verify TypeKindToString produces the same output as KindToString for boolean type.",
    "Input Data": [
      ">>> TypeKind::kBool"
    ],
    "Expected Output": [
      ">>> %<< TypeKindToString(TypeKind::kBool) == KindToString(Kind::kBool);//EXPECT_EQ(TypeKindToString(TypeKind::kBool), KindToString(Kind::kBool))",
      "true"
    ],
    "Clang-repl Test": [
      ">>> // Global Settings:",
      ">>> #include \"common/kind.h\"",
      ">>> #include <limits>",
      ">>> #include <type_traits>",
      ">>> #include \"common/type_kind.h\"",
      ">>> #include \"common/value_kind.h\"",
      ">>> #include \"internal/testing.h\"",
      ">>> ",
      ">>> /*namespace cel {*/",
      ">>> // Test Object: Verify TypeKindToString produces the same output as KindToString for boolean type.",
      ">>> // Test Case: TypeKind_ToString",
      ">>> %<< TypeKindToString(TypeKind::kBool) == KindToString(Kind::kBool);//EXPECT_EQ(TypeKindToString(TypeKind::kBool), KindToString(Kind::kBool))",
      "true",
      ">>> /*}*/"
    ]
  },
  {
    "Test Target": [
      "absl::string_view KindToString(Kind kind) {",
      "  switch (kind) {",
      "    case Kind::kNullType:",
      "      return \"null_type\";",
      "    case Kind::kDyn:",
      "      return \"dyn\";",
      "    case Kind::kAny:",
      "      return \"any\";",
      "    case Kind::kType:",
      "      return \"type\";",
      "    case Kind::kTypeParam:",
      "      return \"type_param\";",
      "    case Kind::kFunction:",
      "      return \"function\";",
      "    case Kind::kBool:",
      "      return \"bool\";",
      "    case Kind::kInt:",
      "      return \"int\";",
      "    case Kind::kUint:",
      "      return \"uint\";",
      "    case Kind::kDouble:",
      "      return \"double\";",
      "    case Kind::kString:",
      "      return \"string\";",
      "    case Kind::kBytes:",
      "      return \"bytes\";",
      "    case Kind::kDuration:",
      "      return \"duration\";",
      "    case Kind::kTimestamp:",
      "      return \"timestamp\";",
      "    case Kind::kList:",
      "      return \"list\";",
      "    case Kind::kMap:",
      "      return \"map\";",
      "    case Kind::kStruct:",
      "      return \"struct\";",
      "    case Kind::kUnknown:",
      "      return \"*unknown*\";",
      "    case Kind::kOpaque:",
      "      return \"*opaque*\";",
      "    case Kind::kBoolWrapper:",
      "      return \"google.protobuf.BoolValue\";",
      "    case Kind::kIntWrapper:",
      "      return \"google.protobuf.Int64Value\";",
      "    case Kind::kUintWrapper:",
      "      return \"google.protobuf.UInt64Value\";",
      "    case Kind::kDoubleWrapper:",
      "      return \"google.protobuf.DoubleValue\";",
      "    case Kind::kStringWrapper:",
      "      return \"google.protobuf.StringValue\";",
      "    case Kind::kBytesWrapper:",
      "      return \"google.protobuf.BytesValue\";",
      "    default:",
      "      return \"*error*\";",
      "  }",
      "}"
    ],
    "Test Object": "Verify ValueKindToString produces the same output as KindToString for boolean type.",
    "Input Data": [
      ">>> ValueKind::kBool"
    ],
    "Expected Output": [
      ">>> %<< ValueKindToString(ValueKind::kBool) == KindToString(Kind::kBool);//EXPECT_EQ(ValueKindToString(ValueKind::kBool), KindToString(Kind::kBool))",
      "true"
    ],
    "Clang-repl Test": [
      ">>> // Global Settings:",
      ">>> #include \"common/kind.h\"",
      ">>> #include <limits>",
      ">>> #include <type_traits>",
      ">>> #include \"common/type_kind.h\"",
      ">>> #include \"common/value_kind.h\"",
      ">>> #include \"internal/testing.h\"",
      ">>> ",
      ">>> /*namespace cel {*/",
      ">>> // Test Object: Verify ValueKindToString produces the same output as KindToString for boolean type.",
      ">>> // Test Case: ValueKind_ToString",
      ">>> %<< ValueKindToString(ValueKind::kBool) == KindToString(Kind::kBool);//EXPECT_EQ(ValueKindToString(ValueKind::kBool), KindToString(Kind::kBool))",
      "true",
      ">>> /*}*/"
    ]
  }
]
