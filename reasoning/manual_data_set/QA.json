[
{"Q": "In Custom Clang-repl, What is \"Test Target Object\"?", "A": "A description of the test target."},
{"Q": "In Custom Clang-repl, Is \"Test Target Object\" optional during create \"Test Case\"?", "A": "Optinal"},
{"Q": "In Custom Clang-repl, Where do we specify \"Test Target Object\" in the unit test?", "A": "In a separate field to document the target for clarity."},
{"Q": "In Custom Clang-repl, Do we need to provide any code snippet here?", "A": "No, it's purely descriptive and optional."},
{"Q": "In Custom Clang-repl, What does 'Test Target' refer to?", "A": "An array of strings with the code under test."},
{"Q": "In Custom Clang-repl, Why is it an array of strings?", "A": "It captures exact lines of code."},
{"Q": "In Custom Clang-repl, Can 'Test Target' contain non-C++ lines?", "A": "Yes, if it matches the exact lines relevant to the test."},
{"Q": "In Custom Clang-repl, Is 'Test Target' mandatory to run the test?", "A": "Yes, it identifies the code under test."},
{"Q": "In Custom Clang-repl, What is 'Test Object'?", "A": "It's a description of what's being tested and the objective."},
{"Q": "In Custom Clang-repl, How is 'Test Object' obtained?", "A": "It's inferred from the unit test."},
{"Q": "In Custom Clang-repl, Should 'Test Object' detail dependencies or just the main purpose?", "A": "Primarily the main purpose, though minor dependencies can be mentioned."},
{"Q": "In Custom Clang-repl, What is 'Input Data'?", "A": "An array of strings with relevant test input."},
{"Q": "In Custom Clang-repl, When is 'Input Data' used?", "A": "When the test target needs data to run."},
{"Q": "In Custom Clang-repl, Can 'Input Data' be empty?", "A": "Yes, if no inputs are required for the test."},
{"Q": "In Custom Clang-repl, What is 'Expected Output'?", "A": "An array of standardized strings from the test assertions."},
{"Q": "In Custom Clang-repl, How are 'EXPECT_EQ(A, B)' transformations handled?", "A": "'>>> %<< A == B;', 'true'"},
{"Q": "In Custom Clang-repl, How are 'EXPECT_EQ(A, \"B\")' transformations handled?", "A": "'>>> %<< A;', 'B'"},
{"Q": "In Custom Clang-repl, How are 'EXPECT_TRUE(A)' transformations handled?", "A": "'>>> %<< (A)==true;', 'true'"},
{"Q": "In Custom Clang-repl, How are 'EXPECT_FALSE(A)' transformations handled?", "A": "'>>> %<< (A)==false;', 'true'"},
{"Q": "In Custom Clang-repl, How are 'EXPECT_NE(A, B)' transformations handled?", "A": "'>>> %<< (A)!=(B);', 'true'"},
{"Q": "In Custom Clang-repl, Why should we not add unnecessary backslash quotes after '%<<'?", "A": "To keep the output clean in Clang-repl."},
{"Q": "In Custom Clang-repl, What is the example transformation for 'EXPECT_EQ(A, B); EXPECT_TRUE(A);'?", "A": "[\">>> %<< A == B;\", \"true\", \">>> %<< (A)==true;\", \"true\"]"},
{"Q": "In Custom Clang-repl, How do we handle an 'EXPECT_XXX()' that references a function call?", "A": "We still transform it similarly, as long as it matches one of the known patterns."},
{"Q": "In Custom Clang-repl, What is 'Clang-repl Test'?", "A": "A Custom Clang-repl compatible version of the unit test."},
{"Q": "In Custom Clang-repl, What is the purpose of '%<<'?", "A": "It's the output operator in Custom Clang-repl."},
{"Q": "In Custom Clang-repl, Why do we preserve all global settings under '// Global Setting'?", "A": "To ensure essential environment configurations remain intact."},
{"Q": "In Custom Clang-repl, Why do we not include headers already in 'Test Target'?", "A": "To avoid duplicate includes and potential redefinition errors."},
{"Q": "In Custom Clang-repl, How do we structure test cases within 'Clang-repl Test'?", "A": "Use '// Test Object: <description>' and '// Test Case: <test_name>'."},
{"Q": "In Custom Clang-repl, How do we transform 'EXPECT_XXX()' in 'Clang-repl Test'?", "A": "Use the standardized strings from 'Expected Output'."},
{"Q": "In Custom Clang-repl, Why do we comment out non-essential parts?", "A": "To keep the test focused and avoid irrelevant code in Clang-repl."},
{"Q": "In Custom Clang-repl, How are unreachable functions or statements handled?", "A": "They are replaced with comments like '// Next function cannot be called: canNOtCalled();'."},
{"Q": "In Custom Clang-repl, What is the prompt in Custom Clang-repl?", "A": "```\n>>> (prompt)\n```"},
{"Q": "In Custom Clang-repl, Do we allow multiline comments or backslash-extended lines in Custom Clang-repl Test?", "A": "Custom Clang-repl takes only one line input."},
{"Q": "In Custom Clang-repl, How do we handle loops or conditionals in Custom Clang-repl Test?", "A": "Multiple test cases should cover both branching paths."},
{"Q": "In Custom Clang-repl, Can we add custom macros or definitions in 'Custom Clang-repl Test'?", "A": "Yes, but ensure they don't conflict with existing code or includes."},
{"Q": "In Custom Clang-repl, What if there's an if-else with multiple branches?", "A": "You create multiple test cases, each covering a different path."}
]