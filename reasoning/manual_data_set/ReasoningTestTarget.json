[
    {
        "category": "simple arithmetic",
        "content": "<Test Case><Test Target Object>Add two integers and return the sum.</Test Target Object> <Test Target>int add(int a, int b) {     return a + b; }</Test Target> <Test Case>"
    },
    {
        "category": "simple arithmetic",
        "content": "<Test Case><Test Target Object>Subtract one integer from another and return the difference.</Test Target Object> <Test Target>int subtract(int a, int b) {     return a - b; }</Test Target> <Test Case>"
    },
    {
        "category": "simple arithmetic",
        "content": "<Test Case><Test Target Object>Multiply two integers and return the product.</Test Target Object> <Test Target>int multiply(int a, int b) {     return a * b; }</Test Target> <Test Case>"
    },
    {
        "category": "simple arithmetic",
        "content": "<Test Case><Test Target Object>Divide one integer by another and return the quotient.</Test Target Object> <Test Target>int divide(int a, int b) {     if (b == 0) return 0; // Handle division by zero     return a / b; }</Test Target> <Test Case>"
    },
    {
        "category": "simple arithmetic",
        "content": "<Test Case><Test Target Object>Calculate the remainder of division between two integers.</Test Target Object> <Test Target>int modulo(int a, int b) {     if (b == 0) return 0; // Handle division by zero     return a % b; }</Test Target> <Test Case>"
    },
    {
        "category": "simple arithmetic",
        "content": "<Test Case><Test Target Object>Increment an integer by 1 and return the result.</Test Target Object> <Test Target>int increment(int a) {     return a + 1; }</Test Target> <Test Case>"
    },
    {
        "category": "simple arithmetic",
        "content": "<Test Case><Test Target Object>Decrement an integer by 1 and return the result.</Test Target Object> <Test Target>int decrement(int a) {     return a - 1; }</Test Target> <Test Case>"
    },
    {
        "category": "simple arithmetic",
        "content": "<Test Case><Test Target Object>Calculate the square of an integer.</Test Target Object> <Test Target>int square(int a) {     return a * a; }</Test Target> <Test Case>"
    },
    {
        "category": "simple arithmetic",
        "content": "<Test Case><Test Target Object>Calculate the cube of an integer.</Test Target Object> <Test Target>int cube(int a) {     return a * a * a; }</Test Target> <Test Case>"
    },
    {
        "category": "simple arithmetic",
        "content": "<Test Case><Test Target Object>Calculate the absolute value of an integer.</Test Target Object> <Test Target>int absolute(int a) {     return (a < 0) ? -a : a; }</Test Target> <Test Case>"
    },
    {
        "category": "simple arithmetic",
        "content": "<Test Case><Test Target Object>Calculate the average of two integers.</Test Target Object> <Test Target>int average(int a, int b) {     return (a + b) / 2; }</Test Target> <Test Case>"
    },
    {
        "category": "simple arithmetic",
        "content": "<Test Case><Test Target Object>Determine the maximum of two integers.</Test Target Object> <Test Target>int max(int a, int b) {     return (a > b) ? a : b; }</Test Target> <Test Case>"
    },
    {
        "category": "simple arithmetic",
        "content": "<Test Case><Test Target Object>Determine the minimum of two integers.</Test Target Object> <Test Target>int min(int a, int b) {     return (a < b) ? a : b; }</Test Target> <Test Case>"
    },
    {
        "category": "simple arithmetic",
        "content": "<Test Case><Test Target Object>Calculate the power of an integer (a^b).</Test Target Object> <Test Target>int power(int a, int b) {     int result = 1;     for (int i = 0; i < b; i++) {         result *= a;     }     return result; }</Test Target> <Test Case>"
    },
    {
        "category": "simple arithmetic",
        "content": "<Test Case><Test Target Object>Check if an integer is even and return a boolean result.</Test Target Object> <Test Target>bool isEven(int a) {     return a % 2 == 0; }</Test Target> <Test Case>"
    },
    {
        "category": "simple if",
        "content": "<Test Case><Test Target Object>Check if a number is positive and return a boolean result.</Test Target Object> <Test Target>bool isPositive(int num) {     if (num > 0) {         return true;     }     return false; }</Test Target> <Test Case>"
    },
    {
        "category": "simple if",
        "content": "<Test Case><Test Target Object>Check if a number is negative and return a boolean result.</Test Target Object> <Test Target>bool isNegative(int num) {     if (num < 0) {         return true;     }     return false; }</Test Target> <Test Case>"
    },
    {
        "category": "simple if",
        "content": "<Test Case><Test Target Object>Check if a number is zero and return a boolean result.</Test Target Object> <Test Target>bool isZero(int num) {     if (num == 0) {         return true;     }     return false; }</Test Target> <Test Case>"
    },
    {
        "category": "simple if",
        "content": "<Test Case><Test Target Object>Return the absolute value of an integer using if statement.</Test Target Object> <Test Target>int absoluteValue(int num) {     if (num < 0) {         return -num;     }     return num; }</Test Target> <Test Case>"
    },
    {
        "category": "simple if",
        "content": "<Test Case><Test Target Object>Check if a number is divisible by 3 and return a boolean result.</Test Target Object> <Test Target>bool isDivisibleBy3(int num) {     if (num % 3 == 0) {         return true;     }     return false; }</Test Target> <Test Case>"
    },
    {
        "category": "simple if",
        "content": "<Test Case><Test Target Object>Check if a character is a vowel and return a boolean result.</Test Target Object> <Test Target>bool isVowel(char c) {     if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||         c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {         return true;     }     return false; }</Test Target> <Test Case>"
    },
    {
        "category": "simple if",
        "content": "<Test Case><Test Target Object>Return the maximum of two integers using if statement.</Test Target Object> <Test Target>int findMax(int a, int b) {     if (a > b) {         return a;     }     return b; }</Test Target> <Test Case>"
    },
    {
        "category": "simple if",
        "content": "<Test Case><Test Target Object>Return the minimum of two integers using if statement.</Test Target Object> <Test Target>int findMin(int a, int b) {     if (a < b) {         return a;     }     return b; }</Test Target> <Test Case>"
    },
    {
        "category": "simple if",
        "content": "<Test Case><Test Target Object>Check if a number is even and return a boolean result.</Test Target Object> <Test Target>bool isEvenNumber(int num) {     if (num % 2 == 0) {         return true;     }     return false; }</Test Target> <Test Case>"
    },
    {
        "category": "simple if",
        "content": "<Test Case><Test Target Object>Check if a number is odd and return a boolean result.</Test Target Object> <Test Target>bool isOddNumber(int num) {     if (num % 2 != 0) {         return true;     }     return false; }</Test Target> <Test Case>"
    },
    {
        "category": "simple if",
        "content": "<Test Case><Test Target Object>Check if a year is a leap year and return a boolean result.</Test Target Object> <Test Target>bool isLeapYear(int year) {     if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {         return true;     }     return false; }</Test Target> <Test Case>"
    },
    {
        "category": "simple if",
        "content": "<Test Case><Test Target Object>Check if a character is a digit and return a boolean result.</Test Target Object> <Test Target>bool isDigit(char c) {     if (c >= '0' && c <= '9') {         return true;     }     return false; }</Test Target> <Test Case>"
    },
    {
        "category": "simple if",
        "content": "<Test Case><Test Target Object>Check if a character is an uppercase letter and return a boolean result.</Test Target Object> <Test Target>bool isUppercase(char c) {     if (c >= 'A' && c <= 'Z') {         return true;     }     return false; }</Test Target> <Test Case>"
    },
    {
        "category": "simple if",
        "content": "<Test Case><Test Target Object>Check if a number is within a specified range and return a boolean result.</Test Target Object> <Test Target>bool isInRange(int num, int min, int max) {     if (num >= min && num <= max) {         return true;     }     return false; }</Test Target> <Test Case>"
    },
    {
        "category": "simple if",
        "content": "<Test Case><Test Target Object>Check if a number is a multiple of both 2 and 3 and return a boolean result.</Test Target Object> <Test Target>bool isMultipleOf2And3(int num) {     if (num % 2 == 0 && num % 3 == 0) {         return true;     }     return false; }</Test Target> <Test Case>"
    },
    {
        "category": "simple loop",
        "content": "<Test Case><Test Target Object>Calculate sum of numbers from 1 to n.</Test Target Object> <Test Target>int sumToN(int n) {     int sum = 0;     for (int i = 1; i <= n; i++) {         sum += i;     }     return sum; }</Test Target> <Test Case>"
    },
    {
        "category": "simple loop",
        "content": "<Test Case><Test Target Object>Calculate factorial of a number.</Test Target Object> <Test Target>int factorial(int n) {     int result = 1;     for (int i = 1; i <= n; i++) {         result *= i;     }     return result; }</Test Target> <Test Case>"
    },
    {
        "category": "simple loop",
        "content": "<Test Case><Test Target Object>Count the number of digits in an integer.</Test Target Object> <Test Target>int countDigits(int n) {     int count = 0;     while (n != 0) {         n /= 10;         count++;     }     return count; }</Test Target> <Test Case>"
    },
    {
        "category": "simple loop",
        "content": "<Test Case><Test Target Object>Calculate the sum of digits in an integer.</Test Target Object> <Test Target>int sumDigits(int n) {     int sum = 0;     while (n > 0) {         sum += n % 10;         n /= 10;     }     return sum; }</Test Target> <Test Case>"
    },
    {
        "category": "simple loop",
        "content": "<Test Case><Test Target Object>Reverse an integer.</Test Target Object> <Test Target>int reverseNumber(int n) {     int reversed = 0;     while (n > 0) {         reversed = reversed * 10 + n % 10;         n /= 10;     }     return reversed; }</Test Target> <Test Case>"
    },
    {
        "category": "simple loop",
        "content": "<Test Case><Test Target Object>Check if a number is prime.</Test Target Object> <Test Target>bool isPrime(int n) {     if (n <= 1) return false;     for (int i = 2; i * i <= n; i++) {         if (n % i == 0) return false;     }     return true; }</Test Target> <Test Case>"
    },
    {
        "category": "simple loop",
        "content": "<Test Case><Test Target Object>Calculate the power of a number.</Test Target Object> <Test Target>int power(int base, int exponent) {     int result = 1;     for (int i = 0; i < exponent; i++) {         result *= base;     }     return result; }</Test Target> <Test Case>"
    },
    {
        "category": "simple loop",
        "content": "<Test Case><Test Target Object>Count occurrences of a specific digit in a number.</Test Target Object> <Test Target>int countDigitOccurrences(int n, int digit) {     int count = 0;     while (n > 0) {         if (n % 10 == digit) count++;         n /= 10;     }     return count; }</Test Target> <Test Case>"
    },
    {
        "category": "simple loop",
        "content": "<Test Case><Test Target Object>Print a simple pattern of stars.</Test Target Object> <Test Target>void printStarPattern(int rows) {     for (int i = 1; i <= rows; i++) {         for (int j = 1; j <= i; j++) {             printf(\"*\");         }         printf(\"\\\\n\");     } }</Test Target> <Test Case>"
    },
    {
        "category": "simple loop",
        "content": "<Test Case><Test Target Object>Calculate the greatest common divisor (GCD) of two numbers.</Test Target Object> <Test Target>int calculateGCD(int a, int b) {     while (b != 0) {         int temp = b;         b = a % b;         a = temp;     }     return a; }</Test Target> <Test Case>"
    },
    {
        "category": "simple loop",
        "content": "<Test Case><Test Target Object>Calculate the sum of even numbers up to n.</Test Target Object> <Test Target>int sumEvenNumbers(int n) {     int sum = 0;     for (int i = 2; i <= n; i += 2) {         sum += i;     }     return sum; }</Test Target> <Test Case>"
    },
    {
        "category": "simple loop",
        "content": "<Test Case><Test Target Object>Check if a number is a palindrome.</Test Target Object> <Test Target>bool isPalindrome(int n) {     int original = n;     int reversed = 0;     while (n > 0) {         reversed = reversed * 10 + n % 10;         n /= 10;     }     return original == reversed; }</Test Target> <Test Case>"
    },
    {
        "category": "simple loop",
        "content": "<Test Case><Test Target Object>Generate Fibonacci sequence up to n terms.</Test Target Object> <Test Target>void fibonacci(int n) {     int a = 0, b = 1;     for (int i = 0; i < n; i++) {         printf(\"%d \", a);         int next = a + b;         a = b;         b = next;     } }</Test Target> <Test Case>"
    },
    {
        "category": "simple loop",
        "content": "<Test Case><Test Target Object>Count the number of vowels in a string.</Test Target Object> <Test Target>int countVowels(const char* str) {     int count = 0;     for (int i = 0; str[i] != '\\\\0'; i++) {         char c = tolower(str[i]);         if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {             count++;         }     }     return count; }</Test Target> <Test Case>"
    },
    {
        "category": "simple loop",
        "content": "<Test Case><Test Target Object>Calculate the average of an array of integers.</Test Target Object> <Test Target>double calculateAverage(int arr[], int size) {     int sum = 0;     for (int i = 0; i < size; i++) {         sum += arr[i];     }     return (double)sum / size; }</Test Target> <Test Case>"
    },
    {
        "category": "loop and if",
        "content": "<Test Case><Test Target Object>Count the number of even numbers in an array.</Test Target Object> <Test Target>int countEvenNumbers(int arr[], int size) {     int count = 0;     for (int i = 0; i < size; i++) {         if (arr[i] % 2 == 0) {             count++;         }     }     return count; }</Test Target> <Test Case>"
    },
    {
        "category": "loop and if",
        "content": "<Test Case><Test Target Object>Find the maximum value in an array.</Test Target Object> <Test Target>int findMax(int arr[], int size) {     if (size <= 0) return -1;     int max = arr[0];     for (int i = 1; i < size; i++) {         if (arr[i] > max) {             max = arr[i];         }     }     return max; }</Test Target> <Test Case>"
    },
    {
        "category": "loop and if",
        "content": "<Test Case><Test Target Object>Calculate the sum of positive numbers in an array.</Test Target Object> <Test Target>int sumPositives(int arr[], int size) {     int sum = 0;     for (int i = 0; i < size; i++) {         if (arr[i] > 0) {             sum += arr[i];         }     }     return sum; }</Test Target> <Test Case>"
    },
    {
        "category": "loop and if",
        "content": "<Test Case><Test Target Object>Check if an array is sorted in ascending order.</Test Target Object> <Test Target>bool isSorted(int arr[], int size) {     for (int i = 1; i < size; i++) {         if (arr[i] < arr[i-1]) {             return false;         }     }     return true; }</Test Target> <Test Case>"
    },
    {
        "category": "loop and if",
        "content": "<Test Case><Test Target Object>Find the first occurrence of a value in an array.</Test Target Object> <Test Target>int findFirstOccurrence(int arr[], int size, int value) {     for (int i = 0; i < size; i++) {         if (arr[i] == value) {             return i;         }     }     return -1; }</Test Target> <Test Case>"
    },
    {
        "category": "loop and if",
        "content": "<Test Case><Test Target Object>Count prime numbers in an array.</Test Target Object> <Test Target>bool isPrimeNumber(int n) {     if (n <= 1) return false;     for (int i = 2; i * i <= n; i++) {         if (n % i == 0) return false;     }     return true; }  int countPrimes(int arr[], int size) {     int count = 0;     for (int i = 0; i < size; i++) {         if (isPrimeNumber(arr[i])) {             count++;         }     }     return count; }</Test Target> <Test Case>"
    },
    {
        "category": "loop and if",
        "content": "<Test Case><Test Target Object>Print only non-zero elements of an array.</Test Target Object> <Test Target>void printNonZero(int arr[], int size) {     for (int i = 0; i < size; i++) {         if (arr[i] != 0) {             printf(\"%d \", arr[i]);         }     } }</Test Target> <Test Case>"
    },
    {
        "category": "loop and if",
        "content": "<Test Case><Test Target Object>Count the number of uppercase letters in a string.</Test Target Object> <Test Target>int countUpperCase(const char* str) {     int count = 0;     for (int i = 0; str[i] != '\\\\0'; i++) {         if (str[i] >= 'A' && str[i] <= 'Z') {             count++;         }     }     return count; }</Test Target> <Test Case>"
    },
    {
        "category": "loop and if",
        "content": "<Test Case><Test Target Object>Remove spaces from a string.</Test Target Object> <Test Target>void removeSpaces(char* str) {     int i = 0, j = 0;     while (str[i]) {         if (str[i] != ' ') {             str[j++] = str[i];         }         i++;     }     str[j] = '\\\\0'; }</Test Target> <Test Case>"
    },
    {
        "category": "loop and if",
        "content": "<Test Case><Test Target Object>Find the second largest element in an array.</Test Target Object> <Test Target>int findSecondLargest(int arr[], int size) {     if (size < 2) return -1;     int largest = arr[0];     int secondLargest = INT_MIN;          for (int i = 1; i < size; i++) {         if (arr[i] > largest) {             secondLargest = largest;             largest = arr[i];         } else if (arr[i] > secondLargest && arr[i] != largest) {             secondLargest = arr[i];         }     }     return secondLargest; }</Test Target> <Test Case>"
    },
    {
        "category": "loop and if",
        "content": "<Test Case><Test Target Object>Check if a number is a perfect number.</Test Target Object> <Test Target>bool isPerfectNumber(int n) {     if (n <= 1) return false;          int sum = 1;     for (int i = 2; i * i <= n; i++) {         if (n % i == 0) {             sum += i;             if (i != n / i) {                 sum += n / i;             }         }     }     return sum == n; }</Test Target> <Test Case>"
    },
    {
        "category": "loop and if",
        "content": "<Test Case><Test Target Object>Convert a binary number to decimal.</Test Target Object> <Test Target>int binaryToDecimal(int binary) {     int decimal = 0;     int base = 1;          while (binary > 0) {         int lastDigit = binary % 10;         if (lastDigit != 0 && lastDigit != 1) {             return -1; // Invalid binary input         }         decimal += lastDigit * base;         binary /= 10;         base *= 2;     }     return decimal; }</Test Target> <Test Case>"
    },
    {
        "category": "loop and if",
        "content": "<Test Case><Test Target Object>Print a pattern of numbers based on row number.</Test Target Object> <Test Target>void printNumberPattern(int rows) {     for (int i = 1; i <= rows; i++) {         for (int j = 1; j <= i; j++) {             if (j == 1 || j == i || i == rows) {                 printf(\"%d \", j);             } else {                 printf(\"  \");             }         }         printf(\"\\\\n\");     } }</Test Target> <Test Case>"
    },
    {
        "category": "loop and if",
        "content": "<Test Case><Test Target Object>Find longest sequence of consecutive zeros in a binary number.</Test Target Object> <Test Target>int longestZeroSequence(int binary) {     int maxCount = 0, currentCount = 0;          while (binary > 0) {         if (binary % 10 == 0) {             currentCount++;             if (currentCount > maxCount) {                 maxCount = currentCount;             }         } else {             currentCount = 0;         }         binary /= 10;     }     return maxCount; }</Test Target> <Test Case>"
    },
    {
        "category": "loop and if",
        "content": "<Test Case><Test Target Object>Filter even numbers from an array into a new array.</Test Target Object> <Test Target>int filterEvenNumbers(int src[], int dest[], int size) {     int count = 0;     for (int i = 0; i < size; i++) {         if (src[i] % 2 == 0) {             dest[count++] = src[i];         }     }     return count; }</Test Target> <Test Case>"
    },
    {
        "category": "simple state",
        "content": "<Test Case><Test Target Object>Toggle a boolean state variable.</Test Target Object> <Test Target>bool isActive = false;  void toggleState() {     isActive = !isActive; }</Test Target> <Test Case>"
    },
    {
        "category": "simple state",
        "content": "<Test Case><Test Target Object>Increment a counter state variable with a maximum limit.</Test Target Object> <Test Target>int counter = 0; const int MAX_COUNT = 10;  void incrementCounter() {     if (counter < MAX_COUNT) {         counter++;     } }</Test Target> <Test Case>"
    },
    {
        "category": "simple state",
        "content": "<Test Case><Test Target Object>Decrement a counter state variable with a minimum limit.</Test Target Object> <Test Target>int counter = 5; const int MIN_COUNT = 0;  void decrementCounter() {     if (counter > MIN_COUNT) {         counter--;     } }</Test Target> <Test Case>"
    },
    {
        "category": "simple state",
        "content": "<Test Case><Test Target Object>Maintain a simple traffic light state machine.</Test Target Object> <Test Target>enum TrafficLight { RED, YELLOW, GREEN }; TrafficLight currentLight = RED;  void changeLight() {     switch (currentLight) {         case RED:             currentLight = GREEN;             break;         case YELLOW:             currentLight = RED;             break;         case GREEN:             currentLight = YELLOW;             break;     } }</Test Target> <Test Case>"
    },
    {
        "category": "simple state",
        "content": "<Test Case><Test Target Object>Track if a character has moved in any of the four directions.</Test Target Object> <Test Target>bool hasMoved = false; int posX = 0; int posY = 0;  void moveCharacter(int deltaX, int deltaY) {     posX += deltaX;     posY += deltaY;     if (deltaX != 0 || deltaY != 0) {         hasMoved = true;     } }</Test Target> <Test Case>"
    },
    {
        "category": "simple state",
        "content": "<Test Case><Test Target Object>Maintain a temperature range state.</Test Target Object> <Test Target>enum TempRange { FREEZING, COLD, MODERATE, WARM, HOT }; float temperature = 22.0f; TempRange currentRange = MODERATE;  void updateTempRange() {     if (temperature < 0.0f) {         currentRange = FREEZING;     } else if (temperature < 10.0f) {         currentRange = COLD;     } else if (temperature < 25.0f) {         currentRange = MODERATE;     } else if (temperature < 35.0f) {         currentRange = WARM;     } else {         currentRange = HOT;     } }</Test Target> <Test Case>"
    },
    {
        "category": "simple state",
        "content": "<Test Case><Test Target Object>Track character health state with damage and healing.</Test Target Object> <Test Target>int health = 100; const int MAX_HEALTH = 100; bool isAlive = true;  void updateHealth(int change) {     health += change;     if (health <= 0) {         health = 0;         isAlive = false;     } else if (health > MAX_HEALTH) {         health = MAX_HEALTH;     } }</Test Target> <Test Case>"
    },
    {
        "category": "simple state",
        "content": "<Test Case><Test Target Object>Maintain a simple bank account balance state.</Test Target Object> <Test Target>double balance = 0.0; bool isOverdrawn = false;  void updateBalance(double amount) {     balance += amount;     isOverdrawn = (balance < 0.0); }</Test Target> <Test Case>"
    },
    {
        "category": "simple state",
        "content": "<Test Case><Test Target Object>Track login attempts with lockout state.</Test Target Object> <Test Target>int loginAttempts = 0; const int MAX_ATTEMPTS = 3; bool isLocked = false;  void attemptLogin(bool success) {     if (isLocked) return;          if (success) {         loginAttempts = 0;     } else {         loginAttempts++;         if (loginAttempts >= MAX_ATTEMPTS) {             isLocked = true;         }     } }</Test Target> <Test Case>"
    },
    {
        "category": "simple state",
        "content": "<Test Case><Test Target Object>Maintain a water level state for a tank.</Test Target Object> <Test Target>enum WaterLevel { EMPTY, LOW, MEDIUM, HIGH, FULL }; float level = 0.0f; WaterLevel currentLevel = EMPTY;  void updateWaterLevel(float newLevel) {     level = newLevel;     if (level <= 0.0f) {         currentLevel = EMPTY;     } else if (level < 0.25f) {         currentLevel = LOW;     } else if (level < 0.75f) {         currentLevel = MEDIUM;     } else if (level < 1.0f) {         currentLevel = HIGH;     } else {         currentLevel = FULL;     } }</Test Target> <Test Case>"
    },
    {
        "category": "simple state",
        "content": "<Test Case><Test Target Object>Track game score with high score state.</Test Target Object> <Test Target>int currentScore = 0; int highScore = 0; bool isHighScore = false;  void updateScore(int points) {     currentScore += points;     if (currentScore > highScore) {         highScore = currentScore;         isHighScore = true;     } else {         isHighScore = false;     } }</Test Target> <Test Case>"
    },
    {
        "category": "simple state",
        "content": "<Test Case><Test Target Object>Maintain a file read/write permission state.</Test Target Object> <Test Target>bool canRead = false; bool canWrite = false;  void setPermissions(bool read, bool write) {     canRead = read;     canWrite = write; }</Test Target> <Test Case>"
    },
    {
        "category": "simple state",
        "content": "<Test Case><Test Target Object>Track day/night cycle state.</Test Target Object> <Test Target>enum TimeOfDay { DAWN, DAY, DUSK, NIGHT }; float timeHours = 6.0f; TimeOfDay currentTime = DAWN;  void updateTimeOfDay() {     if (timeHours >= 5.0f && timeHours < 8.0f) {         currentTime = DAWN;     } else if (timeHours >= 8.0f && timeHours < 18.0f) {         currentTime = DAY;     } else if (timeHours >= 18.0f && timeHours < 21.0f) {         currentTime = DUSK;     } else {         currentTime = NIGHT;     } }</Test Target> <Test Case>"
    },
    {
        "category": "simple state",
        "content": "<Test Case><Test Target Object>Maintain a battery charge level state.</Test Target Object> <Test Target>int chargePercentage = 100; bool isCharging = false; bool isLowBattery = false;  void updateBatteryState(int change, bool pluggedIn) {     isCharging = pluggedIn;     chargePercentage += change;          if (chargePercentage > 100) {         chargePercentage = 100;     } else if (chargePercentage < 0) {         chargePercentage = 0;     }          isLowBattery = (chargePercentage <= 15); }</Test Target> <Test Case>"
    },
    {
        "category": "simple state",
        "content": "<Test Case><Test Target Object>Track a simple inventory state.</Test Target Object> <Test Target>int itemCount = 0; const int MAX_INVENTORY = 10; bool isInventoryFull = false;  void addItem() {     if (itemCount < MAX_INVENTORY) {         itemCount++;     }     isInventoryFull = (itemCount >= MAX_INVENTORY); }  void removeItem() {     if (itemCount > 0) {         itemCount--;     }     isInventoryFull = false; }</Test Target> <Test Case>"
    },
    {
        "category": "recursive function",
        "content": "<Test Case><Test Target Object>Calculate factorial of a number recursively.</Test Target Object> <Test Target>int factorial(int n) {     if (n <= 1) {         return 1;     }     return n * factorial(n - 1); }</Test Target> <Test Case>"
    },
    {
        "category": "recursive function",
        "content": "<Test Case><Test Target Object>Calculate Fibonacci number recursively.</Test Target Object> <Test Target>int fibonacci(int n) {     if (n <= 1) {         return n;     }     return fibonacci(n - 1) + fibonacci(n - 2); }</Test Target> <Test Case>"
    },
    {
        "category": "recursive function",
        "content": "<Test Case><Test Target Object>Calculate sum of integers from 1 to n recursively.</Test Target Object> <Test Target>int sumToN(int n) {     if (n <= 0) {         return 0;     }     return n + sumToN(n - 1); }</Test Target> <Test Case>"
    },
    {
        "category": "recursive function",
        "content": "<Test Case><Test Target Object>Calculate power of a number recursively.</Test Target Object> <Test Target>int power(int base, int exponent) {     if (exponent == 0) {         return 1;     }     return base * power(base, exponent - 1); }</Test Target> <Test Case>"
    },
    {
        "category": "recursive function",
        "content": "<Test Case><Test Target Object>Calculate greatest common divisor (GCD) recursively.</Test Target Object> <Test Target>int gcd(int a, int b) {     if (b == 0) {         return a;     }     return gcd(b, a % b); }</Test Target> <Test Case>"
    },
    {
        "category": "recursive function",
        "content": "<Test Case><Test Target Object>Check if a string is palindrome recursively.</Test Target Object> <Test Target>bool isPalindrome(const char* str, int start, int end) {     if (start >= end) {         return true;     }     if (str[start] != str[end]) {         return false;     }     return isPalindrome(str, start + 1, end - 1); }</Test Target> <Test Case>"
    },
    {
        "category": "recursive function",
        "content": "<Test Case><Test Target Object>Calculate the sum of digits of a number recursively.</Test Target Object> <Test Target>int sumOfDigits(int n) {     if (n == 0) {         return 0;     }     return (n % 10) + sumOfDigits(n / 10); }</Test Target> <Test Case>"
    },
    {
        "category": "recursive function",
        "content": "<Test Case><Test Target Object>Count the number of digits in an integer recursively.</Test Target Object> <Test Target>int countDigits(int n) {     if (n < 10) {         return 1;     }     return 1 + countDigits(n / 10); }</Test Target> <Test Case>"
    },
    {
        "category": "recursive function",
        "content": "<Test Case><Test Target Object>Reverse a string recursively.</Test Target Object> <Test Target>void reverseString(char* str, int start, int end) {     if (start >= end) {         return;     }     char temp = str[start];     str[start] = str[end];     str[end] = temp;     reverseString(str, start + 1, end - 1); }</Test Target> <Test Case>"
    },
    {
        "category": "recursive function",
        "content": "<Test Case><Test Target Object>Calculate the product of elements in an array recursively.</Test Target Object> <Test Target>int productOfArray(int arr[], int n) {     if (n <= 0) {         return 1;     }     return arr[n-1] * productOfArray(arr, n-1); }</Test Target> <Test Case>"
    },
    {
        "category": "recursive function",
        "content": "<Test Case><Test Target Object>Binary search implementation using recursion.</Test Target Object> <Test Target>int binarySearch(int arr[], int left, int right, int x) {     if (right >= left) {         int mid = left + (right - left) / 2;                  if (arr[mid] == x) {             return mid;         }                  if (arr[mid] > x) {             return binarySearch(arr, left, mid - 1, x);         }                  return binarySearch(arr, mid + 1, right, x);     }          return -1; }</Test Target> <Test Case>"
    },
    {
        "category": "recursive function",
        "content": "<Test Case><Test Target Object>Count occurrences of a character in a string recursively.</Test Target Object> <Test Target>int countOccurrences(const char* str, char ch, int index) {     if (str[index] == '\\\\0') {         return 0;     }          int count = (str[index] == ch) ? 1 : 0;     return count + countOccurrences(str, ch, index + 1); }</Test Target> <Test Case>"
    },
    {
        "category": "recursive function",
        "content": "<Test Case><Test Target Object>Find the length of a string recursively.</Test Target Object> <Test Target>int stringLength(const char* str) {     if (*str == '\\\\0') {         return 0;     }     return 1 + stringLength(str + 1); }</Test Target> <Test Case>"
    },
    {
        "category": "recursive function",
        "content": "<Test Case><Test Target Object>Print numbers from n to 1 recursively.</Test Target Object> <Test Target>void printReverse(int n) {     if (n <= 0) {         return;     }     printf(\"%d \", n);     printReverse(n - 1); }</Test Target> <Test Case>"
    },
    {
        "category": "recursive function",
        "content": "<Test Case><Test Target Object>Calculate the sum of even elements in an array recursively.</Test Target Object> <Test Target>int sumEvenElements(int arr[], int n) {     if (n <= 0) {         return 0;     }          int sum = sumEvenElements(arr, n - 1);     if (arr[n-1] % 2 == 0) {         sum += arr[n-1];     }     return sum; }</Test Target> <Test Case>"
    },
    {
        "category": "pointer manipulation",
        "content": "<Test Case><Test Target Object>Swap two integers using pointers.</Test Target Object> <Test Target>void swap(int* a, int* b) {     int temp = *a;     *a = *b;     *b = temp; }</Test Target> <Test Case>"
    },
    {
        "category": "pointer manipulation",
        "content": "<Test Case><Test Target Object>Set an integer value to zero using a pointer.</Test Target Object> <Test Target>void setToZero(int* ptr) {     *ptr = 0; }</Test Target> <Test Case>"
    },
    {
        "category": "pointer manipulation",
        "content": "<Test Case><Test Target Object>Double the value of an integer using a pointer.</Test Target Object> <Test Target>void doubleValue(int* ptr) {     *ptr = *ptr * 2; }</Test Target> <Test Case>"
    },
    {
        "category": "pointer manipulation",
        "content": "<Test Case><Test Target Object>Find the minimum of two integers using pointers.</Test Target Object> <Test Target>int* findMin(int* a, int* b) {     return (*a < *b) ? a : b; }</Test Target> <Test Case>"
    },
    {
        "category": "pointer manipulation",
        "content": "<Test Case><Test Target Object>Find the maximum of two integers using pointers.</Test Target Object> <Test Target>int* findMax(int* a, int* b) {     return (*a > *b) ? a : b; }</Test Target> <Test Case>"
    },
    {
        "category": "pointer manipulation",
        "content": "<Test Case><Test Target Object>Copy an array using pointers.</Test Target Object> <Test Target>void copyArray(int* source, int* destination, int size) {     for (int i = 0; i < size; i++) {         *(destination + i) = *(source + i);     } }</Test Target> <Test Case>"
    },
    {
        "category": "pointer manipulation",
        "content": "<Test Case><Test Target Object>Reverse an array in-place using pointers.</Test Target Object> <Test Target>void reverseArray(int* arr, int size) {     int* start = arr;     int* end = arr + size - 1;          while (start < end) {         int temp = *start;         *start = *end;         *end = temp;         start++;         end--;     } }</Test Target> <Test Case>"
    },
    {
        "category": "pointer manipulation",
        "content": "<Test Case><Test Target Object>Calculate the sum of array elements using pointers.</Test Target Object> <Test Target>int sumArray(int* arr, int size) {     int sum = 0;     for (int i = 0; i < size; i++) {         sum += *(arr + i);     }     return sum; }</Test Target> <Test Case>"
    },
    {
        "category": "pointer manipulation",
        "content": "<Test Case><Test Target Object>Find the length of a string using pointer arithmetic.</Test Target Object> <Test Target>int stringLength(const char* str) {     const char* ptr = str;     while (*ptr != '\\\\0') {         ptr++;     }     return ptr - str; }</Test Target> <Test Case>"
    },
    {
        "category": "pointer manipulation",
        "content": "<Test Case><Test Target Object>Copy a string using pointers.</Test Target Object> <Test Target>void stringCopy(char* destination, const char* source) {     while (*source != '\\\\0') {         *destination = *source;         destination++;         source++;     }     *destination = '\\\\0'; }</Test Target> <Test Case>"
    },
    {
        "category": "pointer manipulation",
        "content": "<Test Case><Test Target Object>Concatenate two strings using pointers.</Test Target Object> <Test Target>void stringConcat(char* destination, const char* source) {     // Move to the end of destination string     while (*destination != '\\\\0') {         destination++;     }          // Copy source to the end of destination     while (*source != '\\\\0') {         *destination = *source;         destination++;         source++;     }     *destination = '\\\\0'; }</Test Target> <Test Case>"
    },
    {
        "category": "pointer manipulation",
        "content": "<Test Case><Test Target Object>Count occurrences of a character in a string using pointers.</Test Target Object> <Test Target>int countChar(const char* str, char target) {     int count = 0;     while (*str != '\\\\0') {         if (*str == target) {             count++;         }         str++;     }     return count; }</Test Target> <Test Case>"
    },
    {
        "category": "pointer manipulation",
        "content": "<Test Case><Test Target Object>Find first occurrence of a character in a string using pointers.</Test Target Object> <Test Target>char* findChar(char* str, char target) {     while (*str != '\\\\0') {         if (*str == target) {             return str;         }         str++;     }     return NULL; }</Test Target> <Test Case>"
    },
    {
        "category": "pointer manipulation",
        "content": "<Test Case><Test Target Object>Compare two strings using pointers.</Test Target Object> <Test Target>int stringCompare(const char* str1, const char* str2) {     while (*str1 != '\\\\0' && *str2 != '\\\\0') {         if (*str1 != *str2) {             return *str1 - *str2;         }         str1++;         str2++;     }     return *str1 - *str2; }</Test Target> <Test Case>"
    },
    {
        "category": "pointer manipulation",
        "content": "<Test Case><Test Target Object>Find the median of three integers using pointers.</Test Target Object> <Test Target>int* findMedian(int* a, int* b, int* c) {     if ((*a <= *b && *b <= *c) || (*c <= *b && *b <= *a)) {         return b;     } else if ((*b <= *a && *a <= *c) || (*c <= *a && *a <= *b)) {         return a;     } else {         return c;     } }</Test Target> <Test Case>"
    },
    {
        "category": "string manipulation",
        "content": "<Test Case><Test Target Object>Convert a string to uppercase.</Test Target Object> <Test Target>void toUpperCase(char* str) {     for (int i = 0; str[i] != '\\\\0'; i++) {         if (str[i] >= 'a' && str[i] <= 'z') {             str[i] = str[i] - 32;         }     } }</Test Target> <Test Case>"
    },
    {
        "category": "string manipulation",
        "content": "<Test Case><Test Target Object>Convert a string to lowercase.</Test Target Object> <Test Target>void toLowerCase(char* str) {     for (int i = 0; str[i] != '\\\\0'; i++) {         if (str[i] >= 'A' && str[i] <= 'Z') {             str[i] = str[i] + 32;         }     } }</Test Target> <Test Case>"
    },
    {
        "category": "string manipulation",
        "content": "<Test Case><Test Target Object>Reverse a string in-place.</Test Target Object> <Test Target>void reverseString(char* str) {     int length = 0;     while (str[length] != '\\\\0') {         length++;     }          for (int i = 0; i < length / 2; i++) {         char temp = str[i];         str[i] = str[length - 1 - i];         str[length - 1 - i] = temp;     } }</Test Target> <Test Case>"
    },
    {
        "category": "string manipulation",
        "content": "<Test Case><Test Target Object>Count vowels in a string.</Test Target Object> <Test Target>int countVowels(const char* str) {     int count = 0;     for (int i = 0; str[i] != '\\\\0'; i++) {         char c = str[i];         if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||              c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {             count++;         }     }     return count; }</Test Target> <Test Case>"
    },
    {
        "category": "string manipulation",
        "content": "<Test Case><Test Target Object>Count consonants in a string.</Test Target Object> <Test Target>int countConsonants(const char* str) {     int count = 0;     for (int i = 0; str[i] != '\\\\0'; i++) {         char c = str[i];         if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {             if (!(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||                    c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {                 count++;             }         }     }     return count; }</Test Target> <Test Case>"
    },
    {
        "category": "string manipulation",
        "content": "<Test Case><Test Target Object>Remove spaces from a string.</Test Target Object> <Test Target>void removeSpaces(char* str) {     int i = 0, j = 0;     while (str[i]) {         if (str[i] != ' ') {             str[j++] = str[i];         }         i++;     }     str[j] = '\\\\0'; }</Test Target> <Test Case>"
    },
    {
        "category": "string manipulation",
        "content": "<Test Case><Test Target Object>Check if a string is a palindrome.</Test Target Object> <Test Target>bool isPalindrome(const char* str) {     int length = 0;     while (str[length] != '\\\\0') {         length++;     }          for (int i = 0; i < length / 2; i++) {         if (str[i] != str[length - 1 - i]) {             return false;         }     }     return true; }</Test Target> <Test Case>"
    },
    {
        "category": "string manipulation",
        "content": "<Test Case><Test Target Object>Count occurrences of a substring in a string.</Test Target Object> <Test Target>int countSubstring(const char* str, const char* sub) {     int count = 0;     int subLen = 0;     while (sub[subLen] != '\\\\0') {         subLen++;     }          for (int i = 0; str[i] != '\\\\0'; i++) {         int j;         for (j = 0; j < subLen; j++) {             if (str[i + j] != sub[j]) {                 break;             }         }         if (j == subLen) {             count++;             i += subLen - 1;         }     }     return count; }</Test Target> <Test Case>"
    },
    {
        "category": "string manipulation",
        "content": "<Test Case><Test Target Object>Convert a string to title case.</Test Target Object> <Test Target>void toTitleCase(char* str) {     int newWord = 1;     for (int i = 0; str[i] != '\\\\0'; i++) {         if (str[i] == ' ') {             newWord = 1;         } else if (newWord) {             if (str[i] >= 'a' && str[i] <= 'z') {                 str[i] = str[i] - 32;             }             newWord = 0;         } else if (str[i] >= 'A' && str[i] <= 'Z') {             str[i] = str[i] + 32;         }     } }</Test Target> <Test Case>"
    },
    {
        "category": "string manipulation",
        "content": "<Test Case><Test Target Object>Trim leading and trailing spaces from a string.</Test Target Object> <Test Target>void trimString(char* str) {     int i = 0, j = 0;          // Find first non-space character     while (str[i] == ' ') {         i++;     }          // Shift all characters to remove leading spaces     while (str[i] != '\\\\0') {         str[j++] = str[i++];     }     str[j] = '\\\\0';          // Remove trailing spaces     j = 0;     while (str[j] != '\\\\0') {         j++;     }     j--;          while (j >= 0 && str[j] == ' ') {         str[j--] = '\\\\0';     } }</Test Target> <Test Case>"
    },
    {
        "category": "string manipulation",
        "content": "<Test Case><Test Target Object>Find first occurrence of a character in a string.</Test Target Object> <Test Target>int findChar(const char* str, char c) {     for (int i = 0; str[i] != '\\\\0'; i++) {         if (str[i] == c) {             return i;         }     }     return -1; }</Test Target> <Test Case>"
    },
    {
        "category": "string manipulation",
        "content": "<Test Case><Test Target Object>Find last occurrence of a character in a string.</Test Target Object> <Test Target>int findLastChar(const char* str, char c) {     int lastPos = -1;     for (int i = 0; str[i] != '\\\\0'; i++) {         if (str[i] == c) {             lastPos = i;         }     }     return lastPos; }</Test Target> <Test Case>"
    },
    {
        "category": "string manipulation",
        "content": "<Test Case><Test Target Object>Replace a character in a string with another character.</Test Target Object> <Test Target>void replaceChar(char* str, char oldChar, char newChar) {     for (int i = 0; str[i] != '\\\\0'; i++) {         if (str[i] == oldChar) {             str[i] = newChar;         }     } }</Test Target> <Test Case>"
    },
    {
        "category": "string manipulation",
        "content": "<Test Case><Test Target Object>Count words in a string.</Test Target Object> <Test Target>int countWords(const char* str) {     int count = 0;     int inWord = 0;          for (int i = 0; str[i] != '\\\\0'; i++) {         if (str[i] == ' ' || str[i] == '\\\\t' || str[i] == '\\\\n') {             inWord = 0;         } else if (inWord == 0) {             inWord = 1;             count++;         }     }          return count; }</Test Target> <Test Case>"
    },
    {
        "category": "string manipulation",
        "content": "<Test Case><Test Target Object>Convert a string of digits to an integer.</Test Target Object> <Test Target>int stringToInt(const char* str) {     int result = 0;     int sign = 1;     int i = 0;          if (str[0] == '-') {         sign = -1;         i = 1;     }          while (str[i] != '\\\\0') {         if (str[i] >= '0' && str[i] <= '9') {             result = result * 10 + (str[i] - '0');         }         i++;     }          return sign * result; }</Test Target> <Test Case>"
    },
    {
        "category": "sort algorithm",
        "content": "<Test Case><Test Target Object>Bubble Sort - Compare adjacent elements and swap if they are in wrong order.</Test Target Object> <Test Target>void bubbleSort(int arr[], int n) {     for (int i = 0; i < n-1; i++) {         for (int j = 0; j < n-i-1; j++) {             if (arr[j] > arr[j+1]) {                 int temp = arr[j];                 arr[j] = arr[j+1];                 arr[j+1] = temp;             }         }     } }</Test Target> <Test Case>"
    },
    {
        "category": "sort algorithm",
        "content": "<Test Case><Test Target Object>Selection Sort - Find the minimum element and place it at the beginning.</Test Target Object> <Test Target>void selectionSort(int arr[], int n) {     for (int i = 0; i < n-1; i++) {         int minIdx = i;         for (int j = i+1; j < n; j++) {             if (arr[j] < arr[minIdx]) {                 minIdx = j;             }         }         int temp = arr[minIdx];         arr[minIdx] = arr[i];         arr[i] = temp;     } }</Test Target> <Test Case>"
    },
    {
        "category": "sort algorithm",
        "content": "<Test Case><Test Target Object>Insertion Sort - Build sorted array one element at a time.</Test Target Object> <Test Target>void insertionSort(int arr[], int n) {     for (int i = 1; i < n; i++) {         int key = arr[i];         int j = i - 1;                  while (j >= 0 && arr[j] > key) {             arr[j+1] = arr[j];             j--;         }         arr[j+1] = key;     } }</Test Target> <Test Case>"
    },
    {
        "category": "sort algorithm",
        "content": "<Test Case><Test Target Object>Merge Sort - Divide array into halves, sort them and merge.</Test Target Object> <Test Target>void merge(int arr[], int left, int mid, int right) {     int i, j, k;     int n1 = mid - left + 1;     int n2 = right - mid;          int L[n1], R[n2];          for (i = 0; i < n1; i++)         L[i] = arr[left + i];     for (j = 0; j < n2; j++)         R[j] = arr[mid + 1 + j];          i = 0;     j = 0;     k = left;          while (i < n1 && j < n2) {         if (L[i] <= R[j]) {             arr[k] = L[i];             i++;         } else {             arr[k] = R[j];             j++;         }         k++;     }          while (i < n1) {         arr[k] = L[i];         i++;         k++;     }          while (j < n2) {         arr[k] = R[j];         j++;         k++;     } }  void mergeSort(int arr[], int left, int right) {     if (left < right) {         int mid = left + (right - left) / 2;                  mergeSort(arr, left, mid);         mergeSort(arr, mid + 1, right);                  merge(arr, left, mid, right);     } }</Test Target> <Test Case>"
    },
    {
        "category": "sort algorithm",
        "content": "<Test Case><Test Target Object>Quick Sort - Choose a pivot, partition array and recursively sort.</Test Target Object> <Test Target>int partition(int arr[], int low, int high) {     int pivot = arr[high];     int i = low - 1;          for (int j = low; j <= high - 1; j++) {         if (arr[j] < pivot) {             i++;             int temp = arr[i];             arr[i] = arr[j];             arr[j] = temp;         }     }          int temp = arr[i+1];     arr[i+1] = arr[high];     arr[high] = temp;          return i + 1; }  void quickSort(int arr[], int low, int high) {     if (low < high) {         int pi = partition(arr, low, high);                  quickSort(arr, low, pi - 1);         quickSort(arr, pi + 1, high);     } }</Test Target> <Test Case>"
    },
    {
        "category": "sort algorithm",
        "content": "<Test Case><Test Target Object>Heap Sort - Build a heap and repeatedly extract maximum element.</Test Target Object> <Test Target>void heapify(int arr[], int n, int i) {     int largest = i;     int left = 2 * i + 1;     int right = 2 * i + 2;          if (left < n && arr[left] > arr[largest])         largest = left;          if (right < n && arr[right] > arr[largest])         largest = right;          if (largest != i) {         int temp = arr[i];         arr[i] = arr[largest];         arr[largest] = temp;                  heapify(arr, n, largest);     } }  void heapSort(int arr[], int n) {     for (int i = n / 2 - 1; i >= 0; i--)         heapify(arr, n, i);          for (int i = n - 1; i > 0; i--) {         int temp = arr[0];         arr[0] = arr[i];         arr[i] = temp;                  heapify(arr, i, 0);     } }</Test Target> <Test Case>"
    },
    {
        "category": "sort algorithm",
        "content": "<Test Case><Test Target Object>Counting Sort - Count occurrences of each element and place them in order.</Test Target Object> <Test Target>void countingSort(int arr[], int n, int max) {     int output[n];     int count[max + 1];          for (int i = 0; i <= max; i++)         count[i] = 0;          for (int i = 0; i < n; i++)         count[arr[i]]++;          for (int i = 1; i <= max; i++)         count[i] += count[i - 1];          for (int i = n - 1; i >= 0; i--) {         output[count[arr[i]] - 1] = arr[i];         count[arr[i]]--;     }          for (int i = 0; i < n; i++)         arr[i] = output[i]; }</Test Target> <Test Case>"
    },
    {
        "category": "sort algorithm",
        "content": "<Test Case><Test Target Object>Radix Sort - Sort by each digit position.</Test Target Object> <Test Target>int getMax(int arr[], int n) {     int max = arr[0];     for (int i = 1; i < n; i++)         if (arr[i] > max)             max = arr[i];     return max; }  void countSort(int arr[], int n, int exp) {     int output[n];     int count[10] = {0};          for (int i = 0; i < n; i++)         count[(arr[i] / exp) % 10]++;          for (int i = 1; i < 10; i++)         count[i] += count[i - 1];          for (int i = n - 1; i >= 0; i--) {         output[count[(arr[i] / exp) % 10] - 1] = arr[i];         count[(arr[i] / exp) % 10]--;     }          for (int i = 0; i < n; i++)         arr[i] = output[i]; }  void radixSort(int arr[], int n) {     int max = getMax(arr, n);          for (int exp = 1; max / exp > 0; exp *= 10)         countSort(arr, n, exp); }</Test Target> <Test Case>"
    },
    {
        "category": "sort algorithm",
        "content": "<Test Case><Test Target Object>Bucket Sort - Divide array into buckets and sort them individually.</Test Target Object> <Test Target>void bucketSort(float arr[], int n) {     // Create n empty buckets     struct Node* buckets[n];     for (int i = 0; i < n; i++)         buckets[i] = NULL;          // Put array elements in different buckets     for (int i = 0; i < n; i++) {         int bucketIndex = n * arr[i];         // Insert into bucket (simplified - would use linked list in real implementation)         float temp[n];         int cnt = 0;                  // Get current bucket elements (if any)         for (int j = 0; j < i; j++)             if (int(n * arr[j]) == bucketIndex)                 temp[cnt++] = arr[j];                  // Insert new element         temp[cnt++] = arr[i];                  // Sort bucket (insertion sort on small array)         for (int j = 1; j < cnt; j++) {             float key = temp[j];             int k = j - 1;             while (k >= 0 && temp[k] > key) {                 temp[k + 1] = temp[k];                 k--;             }             temp[k + 1] = key;         }                  // Replace original array with sorted bucket elements         int idx = 0;         for (int j = 0; j < i; j++)             if (int(n * arr[j]) != bucketIndex)                 continue;             else                 arr[j] = temp[idx++];                  arr[i] = temp[idx];     } }</Test Target> <Test Case>"
    },
    {
        "category": "sort algorithm",
        "content": "<Test Case><Test Target Object>Shell Sort - Variation of insertion sort, compare elements separated by a gap.</Test Target Object> <Test Target>void shellSort(int arr[], int n) {     for (int gap = n/2; gap > 0; gap /= 2) {         for (int i = gap; i < n; i++) {             int temp = arr[i];             int j;                          for (j = i; j >= gap && arr[j - gap] > temp; j -= gap)                 arr[j] = arr[j - gap];                          arr[j] = temp;         }     } }</Test Target> <Test Case>"
    },
    {
        "category": "sort algorithm",
        "content": "<Test Case><Test Target Object>Comb Sort - Improvement of bubble sort, compares items with gap.</Test Target Object> <Test Target>void combSort(int arr[], int n) {     int gap = n;     bool swapped = true;          while (gap > 1 || swapped) {         gap = (gap * 10) / 13;         if (gap < 1)             gap = 1;                      swapped = false;                  for (int i = 0; i < n - gap; i++) {             if (arr[i] > arr[i + gap]) {                 int temp = arr[i];                 arr[i] = arr[i + gap];                 arr[i + gap] = temp;                 swapped = true;             }         }     } }</Test Target> <Test Case>"
    },
    {
        "category": "sort algorithm",
        "content": "<Test Case><Test Target Object>Cocktail Sort - Variation of bubble sort that sorts in both directions.</Test Target Object> <Test Target>void cocktailSort(int arr[], int n) {     bool swapped = true;     int start = 0;     int end = n - 1;          while (swapped) {         swapped = false;                  // Forward pass (like bubble sort)         for (int i = start; i < end; i++) {             if (arr[i] > arr[i + 1]) {                 int temp = arr[i];                 arr[i] = arr[i + 1];                 arr[i + 1] = temp;                 swapped = true;             }         }                  if (!swapped)             break;                      swapped = false;         end--;                  // Backward pass         for (int i = end - 1; i >= start; i--) {             if (arr[i] > arr[i + 1]) {                 int temp = arr[i];                 arr[i] = arr[i + 1];                 arr[i + 1] = temp;                 swapped = true;             }         }                  start++;     } }</Test Target> <Test Case>"
    },
    {
        "category": "sort algorithm",
        "content": "<Test Case><Test Target Object>Gnome Sort - Simple sorting algorithm similar to insertion sort.</Test Target Object> <Test Target>void gnomeSort(int arr[], int n) {     int index = 0;          while (index < n) {         if (index == 0)             index++;                      if (arr[index] >= arr[index - 1])             index++;         else {             int temp = arr[index];             arr[index] = arr[index - 1];             arr[index - 1] = temp;             index--;         }     } }</Test Target> <Test Case>"
    },
    {
        "category": "sort algorithm",
        "content": "<Test Case><Test Target Object>Odd-Even Sort (Brick Sort) - Variation of bubble sort for parallel processing.</Test Target Object> <Test Target>void oddEvenSort(int arr[], int n) {     bool isSorted = false;          while (!isSorted) {         isSorted = true;                  // Odd phase         for (int i = 1; i < n - 1; i += 2) {             if (arr[i] > arr[i + 1]) {                 int temp = arr[i];                 arr[i] = arr[i + 1];                 arr[i + 1] = temp;                 isSorted = false;             }         }                  // Even phase         for (int i = 0; i < n - 1; i += 2) {             if (arr[i] > arr[i + 1]) {                 int temp = arr[i];                 arr[i] = arr[i + 1];                 arr[i + 1] = temp;                 isSorted = false;             }         }     } }</Test Target> <Test Case>"
    },
    {
        "category": "sort algorithm",
        "content": "<Test Case><Test Target Object>Pigeonhole Sort - Sort items into pigeonholes then collect them.</Test Target Object> <Test Target>void pigeonholeSort(int arr[], int n) {     int min = arr[0], max = arr[0];          for (int i = 1; i < n; i++) {         if (arr[i] < min)             min = arr[i];         if (arr[i] > max)             max = arr[i];     }          int range = max - min + 1;     int pigeonholes[range];          for (int i = 0; i < range; i++)         pigeonholes[i] = 0;          for (int i = 0; i < n; i++)         pigeonholes[arr[i] - min]++;          int index = 0;     for (int i = 0; i < range; i++) {         while (pigeonholes[i] > 0) {             arr[index++] = i + min;             pigeonholes[i]--;         }     } }</Test Target> <Test Case>"
    }
]