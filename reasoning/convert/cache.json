{"d3e7d724-65e4-49d5-b903-487926744984": "update prompt fill ??? part. change \"JSON Sample to Covert:\" ,  \"Result JSON Sample :\",  \"JSON 1 to Covert:\" and \"Result  JSON 1:\" for better prompt:\n\n### Prompt:\nGiven a JSON object containing C++ code and its corresponding unit tests, transform it into a structured JSON format with the following fields:\n\n1. Test Target: An array of strings representing the exact lines of code under test, extracted directly from the \"Code\" field.\n\n2. Test Object: A textual description inferred from the unit test, describing what is being tested and its objective.\n\n3. Input Data: An array of strings containing relevant input data for the test target, if applicable.\n\n4. Expected Output: An array of strings transforming the 'EXPECT_XXX()' assertions into a standardized format:\n\n * 'EXPECT_EQ(A, B)' ==> '\"%<< A;\\\\EXPECT_EQ(A, B)\", \"B\"'\n * 'EXPECT_EQ(A, \"B\")' ==> '\"%<< A;\\\\EXPECT_EQ(A, B)\", \"\\\"B\\\"\"'\n * 'EXPECT_TRUE(A)' ==> '\"%<< (A)==true;\\\\EXPECT_TRUE(A)\", \"true\"'\n * 'EXPECT_FALSE(A)' ==> '\"%<< (A)==false;\\\\EXPECT_FALSE(A)\", \"true\"'\n * 'EXPECT_NE(A, B)' ==> '\"%<< (A)!=(B);\\\\EXPECT_NE(A, B)\", \"true\"'\n\nFor example, if the unit test contains:\n```cpp\nEXPECT_EQ(A, B);\nEXPECT_TRUE(A);\n```\nThe expected output should be:\n```json\n[\"%<< A;\\\\EXPECT_EQ(A, B)\", \"B\", \"%<< (A)==true;\\\\EXPECT_TRUE(A)\", \"true\"]\n```\n5. Clang-repl Test: A transformed version of the unit test in a Clang-repl compatible format:\n\n * Preserve all includes, global settings, and relevant configurations under '// Global Setting'.\n * Structure test cases as:\n  - '// Test Object: <description>'\n  - '// Test Case: <test_name>'\n * Convert 'EXPECT_XXX()' assertions into their respective transformed format from \"Expected Output\".\n * Maintain relevant unit test logic while commenting out non-essential parts:\n  - Replace 'namespace aname {' with '/*namespace aname {*/'\n  - Replace closing braces '}' for namespaces with '/*}*/'\n  - For functions that cannot be used, add comments like '// Next function cannot be called: canNOtCalled();'\n  - For irrelevant statements, add '// Next statement is useless: useLessStatement();'\n\nEnsure that most of the \"Unit Test - (Ground Truth)\" content remains in \"Clang-repl Test.\" If certain parts are omitted, provide a comment explaining the reason.\n\n### Input JSON:\n```json\n{\n  \"Code\": \"int add(int a, int b) {\\\\n    return a + b;\\\\n}\\\\nbool isPositive(int x) {\\\\n    return x > 0;\\\\n}\",\n  \"Unit Test - (Ground Truth)\": \"Calculator calc;\\\\nint result = calc.add(2, 3);\\\\nEXPECT_EQ(result, 5);\\\\nEXPECT_TRUE(calc.isPositive(10));\\\\nEXPECT_FALSE(calc.isPositive(-5));\"\n}\n```\n\n### Converted JSON:\n```json\n{\n  \"Test Target\": [\n    \"int add(int a, int b) {\",\n    \"    return a + b;\",\n    \"}\",\n    \"bool isPositive(int x) {\",\n    \"    return x > 0;\",\n    \"}\"\n  ],\n  \"Test Object\": \"Verify Calculator add returns correct sum and isPositive identifies positive vs negative numbers.\",\n  \"Input Data\": [\n    \"2, 3\",\n    \"10\",\n    \"-5\"\n  ],\n  \"Expected Output\": [\n    \"%<< result;\\\\EXPECT_EQ(result, 5)\",\n    \"5\",\n    \"%<< (calc.isPositive(10))==true;\\\\EXPECT_TRUE(calc.isPositive(10))\",\n    \"true\",\n    \"%<< (calc.isPositive(-5))==false;\\\\EXPECT_FALSE(calc.isPositive(-5))\",\n    \"true\"\n  ],\n  \"Clang-repl Test\": [\n    \"// Global Settings:\",\n    \"#include <gtest/gtest.h>\",\n    \"\",\n    \"// Code under test included for context\",\n    \"class Calculator {\",\n    \"public:\",\n    \"    int add(int a, int b) {\",\n    \"        return a + b;\",\n    \"    }\",\n    \"    bool isPositive(int x) {\",\n    \"        return x > 0;\",\n    \"    }\",\n    \"};\",\n    \"\",\n    \"// Test Object: Verify Calculator add returns correct sum and isPositive identifies positive vs negative numbers.\",\n    \"// Test Case: CalculatorTests.AddFunctionWorks\",\n    \"TEST(CalculatorTests, AddFunctionWorks) {\",\n    \"    Calculator calc;\",\n    \"    int result = calc.add(2, 3);\",\n    \"    %<< result; //EXPECT_EQ(result, 5)\",\n    \"}\",\n    \"\",\n    \"// Test Case: CalculatorTests.IsPositiveTest\",\n    \"TEST(CalculatorTests, IsPositiveTest) {\",\n    \"    Calculator calc;\",\n    \"    %<< (calc.isPositive(10))==true; //EXPECT_TRUE(calc.isPositive(10))\",\n    \"    %<< (calc.isPositive(-5))==false; //EXPECT_FALSE(calc.isPositive(-5))\",\n    \"}\"\n  ]\n}\n```\n\n### Input JSON:\n```json\n", "3644e504-3935-4a0c-bece-23c3b184fbc3": "update prompt fill ??? part. change \"JSON Sample to Covert:\" ,  \"Result JSON Sample :\",  \"JSON 1 to Covert:\" and \"Result  JSON 1:\" for better prompt:\n\n### Prompt:\nGiven a JSON object containing C++ code and its corresponding unit tests, transform it into a structured JSON format with the following fields:\n\n1. Test Target: An array of strings representing the exact lines of code under test, extracted directly from the \"Code\" field.\n\n2. Test Object: A textual description inferred from the unit test, describing what is being tested and its objective.\n\n3. Input Data: An array of strings containing relevant input data for the test target, if applicable.\n\n4. Expected Output: An array of strings transforming the 'EXPECT_XXX()' assertions into a standardized format:\n\n * 'EXPECT_EQ(A, B)' ==> '\"%<< A;\\\\EXPECT_EQ(A, B)\", \"B\"'\n * 'EXPECT_EQ(A, \"B\")' ==> '\"%<< A;\\\\EXPECT_EQ(A, B)\", \"\\\"B\\\"\"'\n * 'EXPECT_TRUE(A)' ==> '\"%<< (A)==true;\\\\EXPECT_TRUE(A)\", \"true\"'\n * 'EXPECT_FALSE(A)' ==> '\"%<< (A)==false;\\\\EXPECT_FALSE(A)\", \"true\"'\n * 'EXPECT_NE(A, B)' ==> '\"%<< (A)!=(B);\\\\EXPECT_NE(A, B)\", \"true\"'\n\nFor example, if the unit test contains:\n```cpp\nEXPECT_EQ(A, B);\nEXPECT_TRUE(A);\n```\nThe expected output should be:\n```json\n[\"%<< A;\\\\EXPECT_EQ(A, B)\", \"B\", \"%<< (A)==true;\\\\EXPECT_TRUE(A)\", \"true\"]\n```\n5. Clang-repl Test: A transformed version of the unit test in a Clang-repl compatible format:\n\n * Preserve all includes, global settings, and relevant configurations under '// Global Setting'.\n * Structure test cases as:\n  - '// Test Object: <description>'\n  - '// Test Case: <test_name>'\n * Convert 'EXPECT_XXX()' assertions into their respective transformed format from \"Expected Output\".\n * Maintain relevant unit test logic while commenting out non-essential parts:\n  - Replace 'namespace aname {' with '/*namespace aname {*/'\n  - Replace closing braces '}' for namespaces with '/*}*/'\n  - For functions that cannot be used, add comments like '// Next function cannot be called: canNOtCalled();'\n  - For irrelevant statements, add '// Next statement is useless: useLessStatement();'\n\nEnsure that most of the \"Unit Test - (Ground Truth)\" content remains in \"Clang-repl Test.\" If certain parts are omitted, provide a comment explaining the reason.\n\n### Input JSON:\n```json\n{\n  \"Code\": \"int add(int a, int b) {\\\\n    return a + b;\\\\n}\\\\nbool isPositive(int x) {\\\\n    return x > 0;\\\\n}\",\n  \"Unit Test - (Ground Truth)\": \"Calculator calc;\\\\nint result = calc.add(2, 3);\\\\nEXPECT_EQ(result, 5);\\\\nEXPECT_TRUE(calc.isPositive(10));\\\\nEXPECT_FALSE(calc.isPositive(-5));\"\n}\n```\n\n### Converted JSON:\n```json\n{\n  \"Test Target\": [\n    \"int add(int a, int b) {\",\n    \"    return a + b;\",\n    \"}\",\n    \"bool isPositive(int x) {\",\n    \"    return x > 0;\",\n    \"}\"\n  ],\n  \"Test Object\": \"Verify Calculator add returns correct sum and isPositive identifies positive vs negative numbers.\",\n  \"Input Data\": [\n    \"2, 3\",\n    \"10\",\n    \"-5\"\n  ],\n  \"Expected Output\": [\n    \"%<< result;\\\\EXPECT_EQ(result, 5)\",\n    \"5\",\n    \"%<< (calc.isPositive(10))==true;\\\\EXPECT_TRUE(calc.isPositive(10))\",\n    \"true\",\n    \"%<< (calc.isPositive(-5))==false;\\\\EXPECT_FALSE(calc.isPositive(-5))\",\n    \"true\"\n  ],\n  \"Clang-repl Test\": [\n    \"// Global Settings:\",\n    \"#include <gtest/gtest.h>\",\n    \"\",\n    \"// Code under test included for context\",\n    \"class Calculator {\",\n    \"public:\",\n    \"    int add(int a, int b) {\",\n    \"        return a + b;\",\n    \"    }\",\n    \"    bool isPositive(int x) {\",\n    \"        return x > 0;\",\n    \"    }\",\n    \"};\",\n    \"\",\n    \"// Test Object: Verify Calculator add returns correct sum and isPositive identifies positive vs negative numbers.\",\n    \"// Test Case: CalculatorTests.AddFunctionWorks\",\n    \"TEST(CalculatorTests, AddFunctionWorks) {\",\n    \"    Calculator calc;\",\n    \"    int result = calc.add(2, 3);\",\n    \"    %<< result; //EXPECT_EQ(result, 5)\",\n    \"}\",\n    \"\",\n    \"// Test Case: CalculatorTests.IsPositiveTest\",\n    \"TEST(CalculatorTests, IsPositiveTest) {\",\n    \"    Calculator calc;\",\n    \"    %<< (calc.isPositive(10))==true; //EXPECT_TRUE(calc.isPositive(10))\",\n    \"    %<< (calc.isPositive(-5))==false; //EXPECT_FALSE(calc.isPositive(-5))\",\n    \"}\"\n  ]\n}\n```"}