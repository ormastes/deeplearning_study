### Prompt:
Given a JSON object containing C++ code and its corresponding unit tests, transform it into a structured JSON format with the following fields:
Stop after a generation of "### Result JSON:" done which may end with "```". Only one generation is allowed.

1. Test Target: An array of strings representing the exact lines of code under test.

2. Test Object: A textual description inferred from the unit test, describing what is being tested and its objective.

3. Input Data: An array of strings containing relevant input data for the test target, if applicable.

4. Expected Output: An array of strings transforming the 'EXPECT_XXX()' assertions into a standardized format:

 * 'EXPECT_EQ(A, B)' ==> '">>> %<< A == B;//EXPECT_EQ(A, B)", "true"'
 * 'EXPECT_EQ(A, "B")' ==> '">>> %<< A;//EXPECT_EQ(A, "B")", "B"'
   * Do not add unnecessary backslash quotation (\") in result after "%<< ....."
 * 'EXPECT_TRUE(A)' ==> '">>> %<< (A)==true;//EXPECT_TRUE(A)", "true"'
 * 'EXPECT_FALSE(A)' ==> '">>> %<< (A)==false;//EXPECT_FALSE(A)", "true"'
 * 'EXPECT_NE(A, B)' ==> '">>> %<< (A)!=(B);//EXPECT_NE(A, B)", "true"'

For example, if the unit test contains:
```cpp
EXPECT_EQ(A, B);
EXPECT_TRUE(A);
```
The expected output should be:
```json
[">>> %<< A;//EXPECT_EQ(A, B)", "B", ">>> %<< (A)==true;//EXPECT_TRUE(A)", "true"]
```
5. Clang-repl Test: A transformed version of the unit test in a Clang-repl compatible format:

 * Preserve all global settings and relevant configurations under '// Global Setting'.
  - Do not include header files that are already included in the "Test Target" or source json "Code"
 * Structure test cases as:
  - '// Test Object: <description>'
  - '// Test Case: <test_name>'
 * Convert 'EXPECT_XXX()' assertions into their respective transformed format from "Expected Output".
 * Maintain relevant unit test logic while commenting out non-essential parts:
  - Replace 'namespace aname {' with '/*namespace aname {*/'
  - Replace closing braces '}' for namespaces with '/*}*/'
  - For functions that cannot be used, add comments like '// Next function cannot be called: canNOtCalled();'
  - For irrelevant statements, add '// Next statement is useless: useLessStatement();'
 * Test generated must runnable in Clang-repl. which has special commend "%<<" which is same as "std::cout <<"
  - Clang-repl prompt is ">>> " rather than "clang-repl> "
 * "Clang-repl Test" include header files of "Test Target" automatically. So, include header files which "Test Target" does not include.
 * Close "```json" with "```" at the end of the JSON object.
 * Do not make multiline comments (/* */)
 * Do not make multiline statements or block which need to ends with "\" in Clang-repl.
 * Do not add unnecessary backslash quotation (\") in result after "%<< ....."
Ensure that most of the "Unit Test - (Ground Truth)" content remains in "Clang-repl Test." If certain parts are omitted, provide a comment explaining the reason.


### Input JSON:
```json
{
  "Code": "int add(int a, int b) {\n    return a + b;\n}\nbool isPositive(int x) {\n    return x > 0;\n}",
  "Unit Test - (Ground Truth)": "#include <gtest/gtest.h>\n\nTEST(AddFunctionWorks) \n{int result = add(2, 3);\\nEXPECT_EQ(result, 5);\n}\n\nTEST(IsPositiveTest) {\nEXPECT_TRUE(isPositive(10));\nEXPECT_FALSE(isPositive(-5));\n}"
}
```

### Result JSON:
```json
[
{
  "Test Target": [
    "int add(int a, int b) {",
    "    return a + b;",
    "}"
  ],
  "Test Object": "Verify Calculator add returns correct sum and isPositive identifies positive vs negative numbers.",
  "Input Data": [
    ">>> int add_a = 2",
    ">>> int add_b = 3"
  ],
  "Expected Output": [
    ">>> %<< result;\\EXPECT_EQ(result, 5)",
    "5"
  ],
  "Clang-repl Test": [
    ">>> // Global Settings:",
    ">>> #include <gtest/gtest.h>",
    ">>> ",
    ">>> // Test Object: Verify Calculator add returns correct sum and isPositive identifies positive vs negative numbers.",
    ">>> // Test Case: AddFunctionWorks // TEST(AddFunctionWorks) {",
    ">>> int add_a = 2",
    ">>> int add_b = 3",
    ">>> int result = add(add_a, add_b);",
    ">>> %<< result; //EXPECT_EQ(result, 5)",
    "5",
    ">>> /*}*/"
  ]
},
{
  "Test Target": [
    "int add(int a, int b) {",
    "    return a + b;",
    "}"
  ],
  "Test Object": "Verify Calculator add returns correct sum and isPositive identifies positive vs negative numbers.",
  "Input Data": [
    ">>> // isPositive 10",
    ">>> // isPositive -5"
  ],
  "Expected Output": [
    ">>> %<< isPositive(10);//EXPECT_TRUE(isPositive(10))",
    "true",
    ">>> %<< isPositive(-5);//EXPECT_FALSE(isPositive(-5))",
    "false"
  ],
  "Clang-repl Test": [
    ">>> // Global Settings:",
    ">>> #include <gtest/gtest.h>",
    ">>> ",
    ">>> // Test Case: IsPositiveTest // TEST(IsPositiveTest) {",
    ">>> %<< isPositive(10);//EXPECT_TRUE(isPositive(10))",
    "true",
    ">>> %<< isPositive(-5);//EXPECT_FALSE(isPositive(-5))",
    "false",
    "/*}*/"
  ]
}
]
```

### Input JSON:
```json
{
  'Code': '#ifndef THIRD_PARTY_CEL_CPP_BASE_KIND_H_\n#define THIRD_PARTY_CEL_CPP_BASE_KIND_H_\n#include "common/kind.h"        \n#include "common/type_kind.h"   \n#include "common/value_kind.h"  \n#endif  \n#include "common/kind.h"\n#include "absl/strings/string_view.h"\nnamespace cel {\nabsl::string_view KindToString(Kind kind) {\n  switch (kind) {\n    case Kind::kNullType:\n      return "null_type";\n    case Kind::kDyn:\n      return "dyn";\n    case Kind::kAny:\n      return "any";\n    case Kind::kType:\n      return "type";\n    case Kind::kTypeParam:\n      return "type_param";\n    case Kind::kFunction:\n      return "function";\n    case Kind::kBool:\n      return "bool";\n    case Kind::kInt:\n      return "int";\n    case Kind::kUint:\n      return "uint";\n    case Kind::kDouble:\n      return "double";\n    case Kind::kString:\n      return "string";\n    case Kind::kBytes:\n      return "bytes";\n    case Kind::kDuration:\n      return "duration";\n    case Kind::kTimestamp:\n      return "timestamp";\n    case Kind::kList:\n      return "list";\n    case Kind::kMap:\n      return "map";\n    case Kind::kStruct:\n      return "struct";\n    case Kind::kUnknown:\n      return "*unknown*";\n    case Kind::kOpaque:\n      return "*opaque*";\n    case Kind::kBoolWrapper:\n      return "google.protobuf.BoolValue";\n    case Kind::kIntWrapper:\n      return "google.protobuf.Int64Value";\n    case Kind::kUintWrapper:\n      return "google.protobuf.UInt64Value";\n    case Kind::kDoubleWrapper:\n      return "google.protobuf.DoubleValue";\n    case Kind::kStringWrapper:\n      return "google.protobuf.StringValue";\n    case Kind::kBytesWrapper:\n      return "google.protobuf.BytesValue";\n    default:\n      return "*error*";\n  }\n}\n}  ',
  'Unit Test - (Ground Truth)': '#include "common/kind.h"\n#include <limits>\n#include <type_traits>\n#include "common/type_kind.h"\n#include "common/value_kind.h"\n#include "internal/testing.h"\nnamespace cel {\nnamespace {\nstatic_assert(std::is_same_v<std::underlying_type_t<TypeKind>,\n                             std::underlying_type_t<ValueKind>>,\n              "TypeKind and ValueKind must have the same underlying type");\nTEST(Kind, ToString) {\n  EXPECT_EQ(KindToString(Kind::kError), "*error*");\n  EXPECT_EQ(KindToString(Kind::kNullType), "null_type");\n  EXPECT_EQ(KindToString(Kind::kDyn), "dyn");\n  EXPECT_EQ(KindToString(Kind::kAny), "any");\n  EXPECT_EQ(KindToString(Kind::kType), "type");\n  EXPECT_EQ(KindToString(Kind::kBool), "bool");\n  EXPECT_EQ(KindToString(Kind::kInt), "int");\n  EXPECT_EQ(KindToString(Kind::kUint), "uint");\n  EXPECT_EQ(KindToString(Kind::kDouble), "double");\n  EXPECT_EQ(KindToString(Kind::kString), "string");\n  EXPECT_EQ(KindToString(Kind::kBytes), "bytes");\n  EXPECT_EQ(KindToString(Kind::kDuration), "duration");\n  EXPECT_EQ(KindToString(Kind::kTimestamp), "timestamp");\n  EXPECT_EQ(KindToString(Kind::kList), "list");\n  EXPECT_EQ(KindToString(Kind::kMap), "map");\n  EXPECT_EQ(KindToString(Kind::kStruct), "struct");\n  EXPECT_EQ(KindToString(Kind::kUnknown), "*unknown*");\n  EXPECT_EQ(KindToString(Kind::kOpaque), "*opaque*");\n  EXPECT_EQ(KindToString(Kind::kBoolWrapper), "google.protobuf.BoolValue");\n  EXPECT_EQ(KindToString(Kind::kIntWrapper), "google.protobuf.Int64Value");\n  EXPECT_EQ(KindToString(Kind::kUintWrapper), "google.protobuf.UInt64Value");\n  EXPECT_EQ(KindToString(Kind::kDoubleWrapper), "google.protobuf.DoubleValue");\n  EXPECT_EQ(KindToString(Kind::kStringWrapper), "google.protobuf.StringValue");\n  EXPECT_EQ(KindToString(Kind::kBytesWrapper), "google.protobuf.BytesValue");\n  EXPECT_EQ(KindToString(static_cast<Kind>(std::numeric_limits<int>::max())),\n            "*error*");\n}\nTEST(Kind, TypeKindRoundtrip) {\n  EXPECT_EQ(TypeKindToKind(KindToTypeKind(Kind::kBool)), Kind::kBool);\n}\nTEST(Kind, ValueKindRoundtrip) {\n  EXPECT_EQ(ValueKindToKind(KindToValueKind(Kind::kBool)), Kind::kBool);\n}\nTEST(Kind, IsTypeKind) {\n  EXPECT_TRUE(KindIsTypeKind(Kind::kBool));\n  EXPECT_TRUE(KindIsTypeKind(Kind::kAny));\n  EXPECT_TRUE(KindIsTypeKind(Kind::kDyn));\n}\nTEST(Kind, IsValueKind) {\n  EXPECT_TRUE(KindIsValueKind(Kind::kBool));\n  EXPECT_FALSE(KindIsValueKind(Kind::kAny));\n  EXPECT_FALSE(KindIsValueKind(Kind::kDyn));\n}\nTEST(Kind, Equality) {\n  EXPECT_EQ(Kind::kBool, TypeKind::kBool);\n  EXPECT_EQ(TypeKind::kBool, Kind::kBool);\n  EXPECT_EQ(Kind::kBool, ValueKind::kBool);\n  EXPECT_EQ(ValueKind::kBool, Kind::kBool);\n  EXPECT_NE(Kind::kBool, TypeKind::kInt);\n  EXPECT_NE(TypeKind::kInt, Kind::kBool);\n  EXPECT_NE(Kind::kBool, ValueKind::kInt);\n  EXPECT_NE(ValueKind::kInt, Kind::kBool);\n}\nTEST(TypeKind, ToString) {\n  EXPECT_EQ(TypeKindToString(TypeKind::kBool), KindToString(Kind::kBool));\n}\nTEST(ValueKind, ToString) {\n  EXPECT_EQ(ValueKindToString(ValueKind::kBool), KindToString(Kind::kBool));\n}\n}  \n}  '}
}

```
